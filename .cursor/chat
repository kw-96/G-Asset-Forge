# Cursor聊天规则

## 基本规则

1. **始终使用简体中文回复**
2. **我的计算机系统是Windows**
3. **当有多个实现方案时，请提供最佳方案并告知我，确认后实施**
4. **每次提供计划时，必须使用sequential thinking MCP工具进行清晰的逐步规划，确保计划严格实施，不允许冗余操作**
5. **不生成虚假代码或模拟代码，确保生成的代码可以实际运行**
6. **每次修改完成后，记录修改内容到logs文件夹的日期日志文件中**
7. **所有上下文记忆使用memory MCP工具记录，每次新Chat开始时自动检索历史记忆**

## 项目特定规则

### G-Asset Forge MVP项目规则

1. **技术栈要求**：
   - Electron 28+ 桌面框架
   - React 18 + TypeScript
   - Suika画布引擎（替代Fabric.js）
   - H5-Editor移动端编辑功能
   - Zustand状态管理
   - 自定义UI组件系统（基于Figma和Penpot设计语言）

2. **性能要求**：
   - 画布操作保持60fps
   - 内存使用控制在500MB以下
   - 启动时间控制在5秒内
   - 画布内存使用控制在100MB以下

3. **代码规范**：
   - TypeScript严格模式
   - React函数组件和Hooks
   - 组件命名PascalCase
   - Props接口以Props结尾
   - 避免any类型

4. **文件组织**：
   ```
   src/
   ├── components/          # UI组件
   ├── engines/            # 引擎集成
   ├── managers/           # 管理器
   ├── models/             # 数据模型
   ├── utils/              # 工具函数
   ├── hooks/              # 自定义Hooks
   ├── styles/             # 样式文件
   └── types/              # 类型定义
   ```

5. **测试要求**：
   - 组件逻辑测试覆盖率 > 80%
   - 工具函数测试覆盖率 > 90%
   - 数据模型测试覆盖率 > 95%

6. **错误处理**：
   - CANVAS_ERROR: 画布相关错误
   - FILE_ERROR: 文件操作错误
   - NETWORK_ERROR: 网络相关错误
   - PERMISSION_ERROR: 权限错误
   - VALIDATION_ERROR: 验证错误
   - SYSTEM_ERROR: 系统错误

7. **用户体验**：
   - 参考Figma和Penpot的设计语言
   - 支持暗色/亮色主题切换
   - 15分钟内完成首个作品
   - 提供直观的工具提示和帮助

8. **跨平台支持**：
   - Windows平台：符合Windows UI约定，生成.exe安装包
   - macOS平台：符合macOS UI约定，生成.dmg安装包
   - 跨平台文件路径处理

## 开发流程规则

1. **计划制定**：使用sequential thinking工具进行逐步规划
2. **代码生成**：确保代码可实际运行，不生成虚假代码
3. **测试验证**：通过所有测试用例，满足性能要求
4. **文档记录**：每次修改完成后记录到日期日志文件
5. **记忆管理**：使用memory MCP工具记录上下文记忆

## 质量保证规则

1. **功能完整性**：实现所有需求功能
2. **代码质量**：符合TypeScript规范，通过ESLint检查
3. **架构合理性**：模块化设计，清晰的接口定义
4. **性能要求**：满足所有性能指标
5. **用户体验**：提供专业级的设计工具体验 