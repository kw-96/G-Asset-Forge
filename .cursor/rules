# G-Asset Forge MVP - Cursor项目规则

## 项目概述

G-Asset Forge 是一个专为企业内网环境设计的桌面应用程序，用于创建游戏素材。该应用集成了Suika高性能画布引擎、H5-Editor移动端编辑功能，并采用基于Figma和Penpot设计理念的现代化UI界面。

## 技术栈规范

### 核心技术
- **桌面框架**: Electron 28+
- **前端框架**: React 18 + TypeScript
- **画布引擎**: Suika (替代Fabric.js)
- **H5编辑器**: H5-Editor (Vue到React适配层)
- **状态管理**: Zustand
- **UI组件库**: 自定义组件系统 (基于Figma和Penpot设计语言)
- **样式系统**: Styled Components / CSS-in-JS
- **主题系统**: 支持暗色/亮色模式切换

### 开发工具
- **构建工具**: Webpack
- **测试框架**: Jest + React Testing Library
- **代码规范**: ESLint + TypeScript
- **打包工具**: electron-builder

## 代码规范

### TypeScript规范
- 严格模式启用
- 所有接口和类型必须明确定义
- 使用泛型提高代码复用性
- 避免any类型，使用unknown或具体类型

### React组件规范
- 使用函数组件和Hooks
- 组件命名采用PascalCase
- Props接口必须以Props结尾
- 状态管理优先使用Zustand

### 文件组织规范
```
src/
├── components/          # UI组件
│   ├── ui/             # 基础UI组件
│   ├── canvas/         # 画布相关组件
│   ├── tools/          # 工具组件
│   └── panels/         # 面板组件
├── engines/            # 引擎集成
│   ├── suika/          # Suika引擎
│   └── h5-editor/      # H5编辑器
├── managers/           # 管理器
│   ├── canvas/         # 画布管理
│   ├── tools/          # 工具管理
│   ├── history/        # 历史管理
│   └── assets/         # 素材管理
├── models/             # 数据模型
├── utils/              # 工具函数
├── hooks/              # 自定义Hooks
├── styles/             # 样式文件
└── types/              # 类型定义
```

## 架构设计原则

### 1. 模块化架构
- 每个功能模块独立开发和测试
- 清晰的接口定义和依赖关系
- 支持插件化扩展

### 2. 性能优先
- 画布操作保持60fps
- 内存使用控制在500MB以下
- 启动时间控制在5秒内

### 3. 用户体验
- 参考Figma和Penpot的设计语言
- 支持暗色/亮色主题切换
- 提供直观的工具提示和帮助

## 开发规范

### 1. 画布引擎开发
- 基于Suika引擎进行开发
- 实现高性能的Canvas渲染
- 支持50%-200%缩放范围
- 内存使用控制在100MB以下

### 2. 工具开发规范
- 每个工具实现统一的接口
- 支持撤销/重做操作
- 提供属性面板和实时预览
- 支持键盘快捷键

### 3. 素材库管理
- 支持5个主要分类：背景、角色、UI元素、图标、特效
- 实现基于关键词和标签的搜索
- 支持自定义素材上传和收藏

### 4. 文件系统集成
- 支持本地和共享网络驱动器
- 实现文件冲突检测和解决
- 提供自动备份和恢复机制

## 测试规范

### 1. 单元测试
- 组件逻辑测试覆盖率 > 80%
- 工具函数测试覆盖率 > 90%
- 数据模型测试覆盖率 > 95%

### 2. 集成测试
- 画布引擎集成测试
- 文件系统操作测试
- 跨进程通信测试

### 3. 性能测试
- 启动性能测试
- 内存使用监控
- 画布操作性能测试

## 错误处理规范

### 1. 错误分类
- CANVAS_ERROR: 画布相关错误
- FILE_ERROR: 文件操作错误
- NETWORK_ERROR: 网络相关错误
- PERMISSION_ERROR: 权限错误
- VALIDATION_ERROR: 验证错误
- SYSTEM_ERROR: 系统错误

### 2. 错误处理策略
- 显示用户友好的错误消息
- 记录详细的错误日志
- 提供错误恢复机制
- 实现优雅的降级处理

## 性能优化规范

### 1. 启动优化
- 渐进式资源加载
- 懒加载机制
- 启动画面和进度显示

### 2. 运行时优化
- 内存使用监控
- CPU使用率优化
- 异步操作和进度反馈

### 3. 文件操作优化
- 异步文件操作
- 文件操作错误恢复
- 共享磁盘访问优化

## 跨平台兼容性

### 1. Windows平台
- 符合Windows UI约定
- 正确处理Windows文件路径
- 生成.exe安装包

### 2. macOS平台
- 符合macOS UI约定
- 正确处理macOS文件路径
- 生成.dmg安装包

### 3. 通用功能
- 跨平台文件路径处理
- 统一的系统资源访问接口
- 平台检测和功能适配

## 用户体验规范

### 1. 界面设计
- 参考Figma的界面布局
- 实现Penpot的简洁交互
- 支持响应式布局

### 2. 交互设计
- 直观的工具切换
- 清晰的状态指示
- 丰富的快捷键支持

### 3. 帮助系统
- 15分钟内完成首个作品
- 交互式教程和示例
- 上下文帮助信息

## 部署规范

### 1. 应用打包
- 使用electron-builder
- 生成Windows和macOS安装包
- 配置应用签名和安全证书

### 2. 企业部署
- 支持企业内网分发
- 提供IT管理员部署指南
- 配置文件模板和批量配置

### 3. 文档要求
- 用户操作手册
- 开发者文档和API参考
- 视频教程和最佳实践

## 代码审查标准

### 1. 功能完整性
- 实现所有需求功能
- 通过所有测试用例
- 满足性能要求

### 2. 代码质量
- 符合TypeScript规范
- 通过ESLint检查
- 良好的代码注释

### 3. 架构合理性
- 模块化设计
- 清晰的接口定义
- 合理的依赖关系

## 版本控制规范

### 1. 分支策略
- main: 主分支，稳定版本
- develop: 开发分支
- feature/*: 功能分支
- hotfix/*: 热修复分支

### 2. 提交规范
- feat: 新功能
- fix: 修复bug
- docs: 文档更新
- style: 代码格式调整
- refactor: 代码重构
- test: 测试相关
- chore: 构建过程或辅助工具的变动

### 3. 版本号规范
- 遵循语义化版本控制
- 格式：主版本号.次版本号.修订号
- 示例：1.0.0

## 安全规范

### 1. 文件安全
- 验证文件类型和大小
- 防止恶意文件上传
- 安全的文件存储路径

### 2. 权限管理
- 最小权限原则
- 用户权限验证
- 敏感操作确认

### 3. 数据安全
- 本地数据加密
- 网络传输安全
- 用户隐私保护

## 监控和日志

### 1. 性能监控
- 应用启动时间
- 内存使用情况
- CPU使用率
- 画布操作性能

### 2. 错误监控
- 错误日志记录
- 错误分类统计
- 错误趋势分析

### 3. 用户行为监控
- 功能使用统计
- 用户操作路径
- 性能瓶颈识别

## 持续集成/持续部署

### 1. CI/CD流程
- 自动化测试
- 代码质量检查
- 自动构建和打包
- 自动化部署

### 2. 环境管理
- 开发环境
- 测试环境
- 生产环境

### 3. 发布流程
- 版本号管理
- 发布说明
- 回滚机制

## 文档维护

### 1. 代码文档
- JSDoc注释
- API文档
- 架构文档

### 2. 用户文档
- 用户手册
- 快速入门指南
- 常见问题解答

### 3. 开发文档
- 开发环境搭建
- 代码规范
- 部署指南

## 团队协作

### 1. 沟通规范
- 定期技术评审
- 代码审查流程
- 问题跟踪和解决

### 2. 知识分享
- 技术分享会
- 最佳实践总结
- 经验教训记录

### 3. 质量保证
- 代码审查
- 测试覆盖率
- 性能基准测试

---

**注意**: 本规则文档基于G-Asset Forge MVP项目的需求文档、设计文档和实施计划制定，所有开发活动必须严格遵循这些规范。 