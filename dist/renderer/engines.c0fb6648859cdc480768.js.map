{"version":3,"file":"engines.c0fb6648859cdc480768.js","mappings":"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","sources":["webpack://g-asset-forge/./src/renderer/engines/suika/suika-canvas-engine.ts","webpack://g-asset-forge/./src/renderer/engines/h5-editor/utils/event-emitter.ts","webpack://g-asset-forge/./src/renderer/engines/h5-editor/core/h5-editor.ts","webpack://g-asset-forge/./src/renderer/engines/h5-editor/adapter/react-adapter.tsx","webpack://g-asset-forge/./src/renderer/engines/suika/core/memory-manager.ts","webpack://g-asset-forge/./src/renderer/engines/suika/adapter/react-adapter.tsx","webpack://g-asset-forge/./src/renderer/engines/suika/adapter/tool-adapter.ts","webpack://g-asset-forge/./src/renderer/engines/suika/utils/event-emitter.ts","webpack://g-asset-forge/./src/renderer/engines/suika/core/viewport-manager.ts","webpack://g-asset-forge/./src/renderer/engines/suika/core/zoom-manager.ts","webpack://g-asset-forge/./src/renderer/engines/suika/core/scene-graph.ts","webpack://g-asset-forge/./src/renderer/engines/suika/core/tool-manager.ts","webpack://g-asset-forge/./src/renderer/engines/suika/core/command-manager.ts","webpack://g-asset-forge/./src/renderer/engines/suika/core/editor.ts","webpack://g-asset-forge/./src/renderer/engines/suika/utils/uuid.ts"],"sourcesContent":["// Suika画布引擎适配器\r\nimport { SuikaEditor } from './core/editor';\r\nimport { SuikaToolAdapter } from './adapter/tool-adapter';\r\nimport type { ICanvasEngine } from '../../core/canvas/canvas-manager';\r\nimport type { \r\n  ICanvasConfig, \r\n  ICanvasState, \r\n  ICanvasObject,\r\n  ICanvasLayer,\r\n  ICanvasSize\r\n} from '../../core/canvas/canvas-types';\r\nimport { CanvasEngineType } from '../../core/canvas/canvas-manager';\r\nimport { EventEmitter } from '../../utils/EventEmitter';\r\nimport type { ITool, ToolType, IToolConfig, IToolProperties } from '../../core/tools/tool-types';\r\n\r\n// 游戏素材尺寸预设\r\nexport const GAME_ASSET_PRESETS = {\r\n  // 移动游戏常用尺寸\r\n  MOBILE_PORTRAIT: { width: 1080, height: 1920, name: 'Mobile Portrait (1080x1920)' },\r\n  MOBILE_LANDSCAPE: { width: 1920, height: 1080, name: 'Mobile Landscape (1920x1080)' },\r\n  IPHONE_X: { width: 1125, height: 2436, name: 'iPhone X (1125x2436)' },\r\n  IPHONE_14: { width: 1170, height: 2532, name: 'iPhone 14 (1170x2532)' },\r\n  \r\n  // 平板尺寸\r\n  IPAD: { width: 1536, height: 2048, name: 'iPad (1536x2048)' },\r\n  IPAD_PRO: { width: 2048, height: 2732, name: 'iPad Pro (2048x2732)' },\r\n  \r\n  // 常用UI元素尺寸\r\n  ICON_SMALL: { width: 64, height: 64, name: 'Small Icon (64x64)' },\r\n  ICON_MEDIUM: { width: 128, height: 128, name: 'Medium Icon (128x128)' },\r\n  ICON_LARGE: { width: 256, height: 256, name: 'Large Icon (256x256)' },\r\n  \r\n  // 背景尺寸\r\n  HD: { width: 1280, height: 720, name: 'HD (1280x720)' },\r\n  FULL_HD: { width: 1920, height: 1080, name: 'Full HD (1920x1080)' },\r\n  QUAD_HD: { width: 2560, height: 1440, name: '2K (2560x1440)' },\r\n  \r\n  // 方形格式\r\n  SQUARE_512: { width: 512, height: 512, name: 'Square 512x512' },\r\n  SQUARE_1024: { width: 1024, height: 1024, name: 'Square 1024x1024' },\r\n  \r\n  // 自定义宽高比\r\n  ASPECT_16_9: { width: 1600, height: 900, name: '16:9 Aspect (1600x900)' },\r\n  ASPECT_4_3: { width: 1024, height: 768, name: '4:3 Aspect (1024x768)' },\r\n  ASPECT_3_2: { width: 1080, height: 720, name: '3:2 Aspect (1080x720)' }\r\n};\r\n\r\nexport interface ISuikaCanvasEngineOptions {\r\n  showPerfMonitor?: boolean;\r\n  userPreference?: Record<string, any>;\r\n  enableGrid?: boolean;\r\n  enableRuler?: boolean;\r\n  backgroundColor?: string;\r\n}\r\n\r\nexport class SuikaCanvasEngine implements ICanvasEngine {\r\n  public readonly type = CanvasEngineType.SUIKA;\r\n  private editor: SuikaEditor | null = null;\r\n  private container: HTMLElement | null = null;\r\n  private options: ISuikaCanvasEngineOptions;\r\n  private eventEmitter = new EventEmitter();\r\n  private isInitialized = false;\r\n  private layers: Map<string, ICanvasLayer> = new Map();\r\n  private activeLayerId = 'default';\r\n  \r\n  // 工具适配器\r\n  private toolAdapter: SuikaToolAdapter | null = null;\r\n\r\n  constructor(options: ISuikaCanvasEngineOptions = {}) {\r\n    this.options = {\r\n      showPerfMonitor: process.env['NODE_ENV'] === 'development',\r\n      enableGrid: true,\r\n      enableRuler: true,\r\n      backgroundColor: '#ffffff',\r\n      ...options\r\n    };\r\n    \r\n    // 创建默认图层\r\n    this.createDefaultLayer();\r\n  }\r\n\r\n  async initialize(container: HTMLElement, config: ICanvasConfig): Promise<void> {\r\n    if (this.isInitialized) {\r\n      throw new Error('SuikaCanvasEngine is already initialized');\r\n    }\r\n\r\n    this.container = container;\r\n    \r\n    try {\r\n      // 清理容器\r\n      while (container.firstChild) {\r\n        container.removeChild(container.firstChild);\r\n      }\r\n      \r\n      // 创建容器div\r\n      const editorContainer = document.createElement('div');\r\n      editorContainer.style.width = '100%';\r\n      editorContainer.style.height = '100%';\r\n      editorContainer.style.backgroundColor = this.options.backgroundColor || '#ffffff';\r\n      editorContainer.setAttribute('data-editor-container', 'true');\r\n      \r\n      container.appendChild(editorContainer);\r\n      \r\n      this.editor = new SuikaEditor({\r\n        containerElement: editorContainer as HTMLDivElement,\r\n        width: config.size.width,\r\n        height: config.size.height,\r\n        showPerfMonitor: this.options.showPerfMonitor ?? false,\r\n        userPreference: this.options.userPreference ?? {}\r\n      });\r\n\r\n      // 初始化工具适配器\r\n      this.toolAdapter = new SuikaToolAdapter(this.editor);\r\n\r\n      // 监听编辑器事件\r\n      this.setupEventListeners();\r\n      \r\n      this.isInitialized = true;\r\n      this.eventEmitter.emit('canvas:created', { type: this.type });\r\n    } catch (error) {\r\n      console.error('Failed to initialize SuikaCanvasEngine:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  destroy(): void {\r\n    if (this.editor) {\r\n      this.editor.destroy();\r\n      this.editor = null;\r\n    }\r\n    if (this.container) {\r\n      // 更安全的DOM清理方式\r\n      try {\r\n        while (this.container.firstChild) {\r\n          this.container.removeChild(this.container.firstChild);\r\n        }\r\n      } catch (error) {\r\n        console.warn('Error clearing container:', error);\r\n        // 如果removeChild失败，尝试innerHTML\r\n        try {\r\n          this.container.innerHTML = '';\r\n        } catch (innerError) {\r\n          console.warn('Error clearing container with innerHTML:', innerError);\r\n        }\r\n      }\r\n      this.container = null;\r\n    }\r\n    \r\n    this.isInitialized = false;\r\n    this.layers.clear();\r\n    this.eventEmitter.emit('canvas:destroyed', { type: this.type });\r\n  }\r\n\r\n  getState(): ICanvasState {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    const editorState = this.editor.getState();\r\n    const zoom = editorState.zoom;\r\n    const viewport = editorState.viewport;\r\n    \r\n    return {\r\n      layers: Array.from(this.layers.values()),\r\n      selectedObjects: editorState.selectedObjects.map((obj: any) => obj.id),\r\n      activeLayer: this.activeLayerId,\r\n      zoom,\r\n      pan: { x: viewport.x, y: viewport.y }\r\n    };\r\n  }\r\n\r\n  setState(state: Partial<ICanvasState>): void {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    const editorState: any = {};\r\n    \r\n    if (state.zoom !== undefined) {\r\n      editorState.zoom = state.zoom;\r\n    }\r\n\r\n    if (state.pan !== undefined) {\r\n      const currentViewport = this.editor.viewportManager.getViewport();\r\n      editorState.viewport = {\r\n        ...currentViewport,\r\n        x: state.pan.x,\r\n        y: state.pan.y\r\n      };\r\n    }\r\n\r\n    if (state.activeLayer !== undefined) {\r\n      this.activeLayerId = state.activeLayer;\r\n    }\r\n\r\n    this.editor.setState(editorState);\r\n  }\r\n\r\n  addObject(object: ICanvasObject): void {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    // 将统一对象格式转换为Suika对象\r\n    const suikaObject = this.convertToSuikaObject(object);\r\n    this.editor.sceneGraph.addObject(suikaObject);\r\n    \r\n    // 添加到当前活动图层\r\n    const activeLayer = this.layers.get(this.activeLayerId);\r\n    if (activeLayer) {\r\n      activeLayer.objects.push(object);\r\n    }\r\n    \r\n    this.editor.render();\r\n    this.eventEmitter.emit('object:added', { object });\r\n  }\r\n\r\n  removeObject(id: string): void {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    this.editor.sceneGraph.removeObject(id);\r\n    \r\n    // 从所有图层中移除对象\r\n    for (const layer of this.layers.values()) {\r\n      layer.objects = layer.objects.filter(obj => obj.id !== id);\r\n    }\r\n    \r\n    this.editor.render();\r\n    this.eventEmitter.emit('object:removed', { id });\r\n  }\r\n\r\n  updateObject(id: string, updates: Partial<ICanvasObject>): void {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    const object = this.editor.sceneGraph.getObject(id);\r\n    if (object) {\r\n      // 更新对象属性\r\n      Object.assign(object, updates);\r\n      this.editor.render();\r\n      this.eventEmitter.emit('object:modified', { id, updates });\r\n    }\r\n  }\r\n\r\n  selectObjects(ids: string[]): void {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    this.editor.toolManager.selectObjects(ids);\r\n    this.editor.render();\r\n    this.eventEmitter.emit('selection:created', { ids });\r\n  }\r\n\r\n  clearSelection(): void {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    this.editor.toolManager.clearSelection();\r\n    this.editor.render();\r\n    this.eventEmitter.emit('selection:cleared', {});\r\n  }\r\n\r\n  // 无限画布视图控制功能实现\r\n  \r\n  /**\r\n   * 设置缩放级别 - 支持10%-500%缩放范围和60fps性能优化\r\n   */\r\n  zoom(level: number, centerPoint?: { x: number; y: number }): void {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    // 扩展缩放范围到10%-500%\r\n    const clampedLevel = Math.max(0.1, Math.min(5.0, level));\r\n    \r\n    if (centerPoint) {\r\n      // 以指定点为中心进行缩放\r\n      this.editor.zoomManager.zoomAt(centerPoint.x, centerPoint.y, clampedLevel / this.editor.zoomManager.getZoom());\r\n    } else {\r\n      this.editor.zoomManager.setZoom(clampedLevel);\r\n    }\r\n    \r\n    this.editor.render();\r\n    this.eventEmitter.emit('zoom:changed', { \r\n      level: clampedLevel, \r\n      centerPoint,\r\n      performance: this.getPerformanceInfo()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 平移画布 - 支持无限制平移功能，支持平滑的增量移动\r\n   */\r\n  pan(deltaX: number, deltaY: number, smooth: boolean = true): void {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    if (smooth) {\r\n      // 平滑平移\r\n      this.editor.viewportManager.smoothPan(deltaX, deltaY);\r\n    } else {\r\n      // 直接平移\r\n      this.editor.viewportManager.pan(deltaX, deltaY);\r\n    }\r\n    \r\n    this.editor.render();\r\n    this.eventEmitter.emit('pan:changed', { \r\n      deltaX, \r\n      deltaY, \r\n      smooth,\r\n      viewport: this.editor.viewportManager.getViewport()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 适应内容功能 - 自动调整到所有对象的最佳查看尺寸\r\n   */\r\n  fitToContent(padding: number = 50): void {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    try {\r\n      this.editor.viewportManager.fitToContent();\r\n      this.editor.render();\r\n      this.eventEmitter.emit('fit:content', { \r\n        padding,\r\n        viewport: this.editor.viewportManager.getViewport()\r\n      });\r\n    } catch (error) {\r\n      console.warn('Failed to fit to content:', error);\r\n      // 回退到适应屏幕\r\n      this.fitToScreen();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 适应屏幕功能\r\n   */\r\n  fitToScreen(): void {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    this.editor.viewportManager.fitToScreen();\r\n    this.editor.render();\r\n    this.eventEmitter.emit('fit:screen', {\r\n      viewport: this.editor.viewportManager.getViewport()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 重置视图到默认状态\r\n   */\r\n  resetView(): void {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    this.editor.viewportManager.resetViewport();\r\n    this.editor.zoomManager.resetZoom();\r\n    this.editor.render();\r\n    this.eventEmitter.emit('view:reset', {\r\n      viewport: this.editor.viewportManager.getViewport(),\r\n      zoom: this.editor.zoomManager.getZoom()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 获取当前视口信息\r\n   */\r\n  getViewportInfo(): { x: number; y: number; zoom: number; width: number; height: number } {\r\n    if (!this.editor) {\r\n      return { x: 0, y: 0, zoom: 1, width: 0, height: 0 };\r\n    }\r\n\r\n    const viewport = this.editor.viewportManager.getViewport();\r\n    const zoom = this.editor.zoomManager.getZoom();\r\n    \r\n    return {\r\n      x: viewport.x,\r\n      y: viewport.y,\r\n      zoom,\r\n      width: viewport.width,\r\n      height: viewport.height\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 设置视口信息\r\n   */\r\n  setViewportInfo(viewportInfo: { x?: number; y?: number; zoom?: number }): void {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    if (viewportInfo.zoom !== undefined) {\r\n      this.zoom(viewportInfo.zoom);\r\n    }\r\n\r\n    if (viewportInfo.x !== undefined || viewportInfo.y !== undefined) {\r\n      const currentViewport = this.editor.viewportManager.getViewport();\r\n      this.editor.viewportManager.setViewport({\r\n        x: viewportInfo.x ?? currentViewport.x,\r\n        y: viewportInfo.y ?? currentViewport.y,\r\n        width: currentViewport.width,\r\n        height: currentViewport.height\r\n      });\r\n    }\r\n\r\n    this.editor.render();\r\n    this.eventEmitter.emit('viewport:changed', this.getViewportInfo());\r\n  }\r\n\r\n  /**\r\n   * 智能网格系统\r\n   */\r\n  enableGrid(enabled: boolean, gridSize: number = 20): void {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    // 这里需要扩展Suika编辑器的网格功能\r\n    // 暂时通过选项设置\r\n    const options = this.editor.viewportManager.getOptions();\r\n    // 假设有网格选项\r\n    this.editor.viewportManager.setOptions({\r\n      ...options,\r\n      // gridEnabled: enabled,\r\n      // gridSize: gridSize\r\n    });\r\n\r\n    this.editor.render();\r\n    this.eventEmitter.emit('grid:changed', { enabled, gridSize });\r\n  }\r\n\r\n  /**\r\n   * 参考线对齐功能\r\n   */\r\n  addGuide(type: 'horizontal' | 'vertical', position: number): string {\r\n    const guideId = `guide-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    // 这里需要实现参考线功能\r\n    // 暂时存储在内部状态中\r\n    this.eventEmitter.emit('guide:added', { \r\n      id: guideId, \r\n      type, \r\n      position \r\n    });\r\n    \r\n    return guideId;\r\n  }\r\n\r\n  /**\r\n   * 移除参考线\r\n   */\r\n  removeGuide(guideId: string): void {\r\n    this.eventEmitter.emit('guide:removed', { id: guideId });\r\n  }\r\n\r\n  /**\r\n   * 视口边界检测\r\n   */\r\n  isPointInViewport(worldX: number, worldY: number): boolean {\r\n    if (!this.editor) {\r\n      return false;\r\n    }\r\n\r\n    const viewport = this.editor.viewportManager.getViewport();\r\n    const zoom = this.editor.zoomManager.getZoom();\r\n    \r\n    // 转换世界坐标到屏幕坐标\r\n    const screenX = worldX * zoom + viewport.x;\r\n    const screenY = worldY * zoom + viewport.y;\r\n    \r\n    return screenX >= 0 && \r\n           screenX <= viewport.width && \r\n           screenY >= 0 && \r\n           screenY <= viewport.height;\r\n  }\r\n\r\n  /**\r\n   * 内容定位功能\r\n   */\r\n  getVisibleObjects(): any[] {\r\n    if (!this.editor) {\r\n      return [];\r\n    }\r\n\r\n    // const viewport = this.editor.viewportManager.getViewport();\r\n    const allObjects = this.editor.sceneGraph.getObjects();\r\n    \r\n    // 过滤出在视口内可见的对象\r\n    return allObjects.filter((obj: any) => {\r\n      if (!obj.x || !obj.y || !obj.width || !obj.height) {\r\n        return false;\r\n      }\r\n      \r\n      // 简单的边界框检测\r\n      return this.isRectIntersectingViewport(obj.x, obj.y, obj.width, obj.height);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 检查矩形是否与视口相交\r\n   */\r\n  private isRectIntersectingViewport(x: number, y: number, width: number, height: number): boolean {\r\n    if (!this.editor) {\r\n      return false;\r\n    }\r\n\r\n    const viewport = this.editor.viewportManager.getViewport();\r\n    const zoom = this.editor.zoomManager.getZoom();\r\n    \r\n    // 转换到屏幕坐标\r\n    const screenLeft = x * zoom + viewport.x;\r\n    const screenTop = y * zoom + viewport.y;\r\n    const screenRight = screenLeft + width * zoom;\r\n    const screenBottom = screenTop + height * zoom;\r\n    \r\n    // 检查是否与视口相交\r\n    return !(screenRight < 0 || \r\n             screenLeft > viewport.width ||\r\n             screenBottom < 0 || \r\n             screenTop > viewport.height);\r\n  }\r\n\r\n  /**\r\n   * 坐标转换：屏幕坐标到世界坐标\r\n   */\r\n  screenToWorld(screenX: number, screenY: number): { x: number; y: number } {\r\n    if (!this.editor) {\r\n      return { x: screenX, y: screenY };\r\n    }\r\n\r\n    const viewport = this.editor.viewportManager.getViewport();\r\n    const zoom = this.editor.zoomManager.getZoom();\r\n    \r\n    return {\r\n      x: (screenX - viewport.x) / zoom,\r\n      y: (screenY - viewport.y) / zoom\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 坐标转换：世界坐标到屏幕坐标\r\n   */\r\n  worldToScreen(worldX: number, worldY: number): { x: number; y: number } {\r\n    if (!this.editor) {\r\n      return { x: worldX, y: worldY };\r\n    }\r\n\r\n    const viewport = this.editor.viewportManager.getViewport();\r\n    const zoom = this.editor.zoomManager.getZoom();\r\n    \r\n    return {\r\n      x: worldX * zoom + viewport.x,\r\n      y: worldY * zoom + viewport.y\r\n    };\r\n  }\r\n\r\n  render(): void {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    this.editor.render();\r\n  }\r\n\r\n  exportImage(format: 'png' | 'jpg', quality: number = 1): string {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n\r\n    const canvas = this.editor.canvasElement;\r\n    return canvas.toDataURL(`image/${format}`, quality);\r\n  }\r\n\r\n  // 获取性能信息\r\n  getPerformanceInfo(): { fps: number; frameCount: number } {\r\n    if (!this.editor) {\r\n      return { fps: 0, frameCount: 0 };\r\n    }\r\n    return this.editor.getPerformanceInfo();\r\n  }\r\n\r\n  // 获取画布尺寸\r\n  getCanvasSize(): ICanvasSize {\r\n    if (!this.editor) {\r\n      return { width: 0, height: 0 };\r\n    }\r\n    return {\r\n      width: this.editor.canvasElement.width,\r\n      height: this.editor.canvasElement.height\r\n    };\r\n  }\r\n\r\n  // 设置画布尺寸\r\n  setCanvasSize(size: ICanvasSize): void {\r\n    if (!this.editor) {\r\n      throw new Error('Suika editor not initialized');\r\n    }\r\n    \r\n    this.editor.canvasElement.width = size.width;\r\n    this.editor.canvasElement.height = size.height;\r\n    this.editor.render();\r\n    this.eventEmitter.emit('canvas:resized', { size });\r\n  }\r\n\r\n  // 创建图层\r\n  createLayer(id: string, name: string): ICanvasLayer {\r\n    const layer: ICanvasLayer = {\r\n      id,\r\n      name,\r\n      visible: true,\r\n      locked: false,\r\n      opacity: 1,\r\n      objects: []\r\n    };\r\n    \r\n    this.layers.set(id, layer);\r\n    return layer;\r\n  }\r\n\r\n  // 获取图层\r\n  getLayer(id: string): ICanvasLayer | undefined {\r\n    return this.layers.get(id);\r\n  }\r\n\r\n  // 获取所有图层\r\n  getLayers(): ICanvasLayer[] {\r\n    return Array.from(this.layers.values());\r\n  }\r\n\r\n  // 设置活动图层\r\n  setActiveLayer(id: string): void {\r\n    if (this.layers.has(id)) {\r\n      this.activeLayerId = id;\r\n    }\r\n  }\r\n\r\n  // 获取活动图层\r\n  getActiveLayer(): ICanvasLayer | undefined {\r\n    return this.layers.get(this.activeLayerId);\r\n  }\r\n\r\n  // 事件监听\r\n  on(event: string, callback: (...args: any[]) => void): void {\r\n    this.eventEmitter.on(event, callback);\r\n  }\r\n\r\n  off(event: string, callback: (...args: any[]) => void): void {\r\n    this.eventEmitter.off(event, callback);\r\n  }\r\n\r\n  // 设置事件监听器\r\n  private setupEventListeners(): void {\r\n    if (!this.editor) return;\r\n\r\n    this.editor.on('render', () => {\r\n      this.eventEmitter.emit('canvas:rendered', {});\r\n    });\r\n\r\n    this.editor.on('selectionChange', () => {\r\n      const selectedObjects = this.editor!.toolManager.getSelectedObjects();\r\n      this.eventEmitter.emit('selection:changed', { selectedObjects });\r\n    });\r\n  }\r\n\r\n  // 创建默认图层\r\n  private createDefaultLayer(): void {\r\n    this.createLayer('default', 'Default Layer');\r\n  }\r\n\r\n  // 转换对象格式\r\n  private convertToSuikaObject(object: ICanvasObject): any {\r\n    // 根据对象类型创建相应的Suika对象\r\n    switch (object.type) {\r\n      case 'rectangle':\r\n        return {\r\n          id: object.id,\r\n          type: 'rect',\r\n          x: object.position.x,\r\n          y: object.position.y,\r\n          width: object.size.width,\r\n          height: object.size.height,\r\n          fill: '#cccccc',\r\n          stroke: '#666666',\r\n          strokeWidth: 1,\r\n          rotation: object.rotation,\r\n          opacity: object.opacity,\r\n          visible: object.visible,\r\n          locked: object.locked\r\n        };\r\n      case 'circle':\r\n        return {\r\n          id: object.id,\r\n          type: 'circle',\r\n          x: object.position.x,\r\n          y: object.position.y,\r\n          radius: Math.min(object.size.width, object.size.height) / 2,\r\n          fill: '#cccccc',\r\n          stroke: '#666666',\r\n          strokeWidth: 1,\r\n          rotation: object.rotation,\r\n          opacity: object.opacity,\r\n          visible: object.visible,\r\n          locked: object.locked\r\n        };\r\n      case 'text':\r\n        return {\r\n          id: object.id,\r\n          type: 'text',\r\n          x: object.position.x,\r\n          y: object.position.y,\r\n          text: 'Text',\r\n          fontSize: 16,\r\n          fontFamily: 'Arial',\r\n          fill: '#333333',\r\n          rotation: object.rotation,\r\n          opacity: object.opacity,\r\n          visible: object.visible,\r\n          locked: object.locked\r\n        };\r\n      case 'image':\r\n        return {\r\n          id: object.id,\r\n          type: 'image',\r\n          x: object.position.x,\r\n          y: object.position.y,\r\n          width: object.size.width,\r\n          height: object.size.height,\r\n          src: '',\r\n          rotation: object.rotation,\r\n          opacity: object.opacity,\r\n          visible: object.visible,\r\n          locked: object.locked\r\n        };\r\n      default:\r\n        throw new Error(`Unsupported object type: ${object.type}`);\r\n    }\r\n  }\r\n\r\n\r\n  // Suika特有的方法\r\n  getSuikaEditor(): SuikaEditor | null {\r\n    return this.editor;\r\n  }\r\n\r\n  // 获取预设尺寸\r\n  static getPresetSizes() {\r\n    return GAME_ASSET_PRESETS;\r\n  }\r\n\r\n  // 工具系统集成方法\r\n  getToolAdapter(): SuikaToolAdapter | null {\r\n    return this.toolAdapter;\r\n  }\r\n\r\n  activateTool(type: ToolType): boolean {\r\n    return this.toolAdapter?.activateTool(type) || false;\r\n  }\r\n\r\n  getActiveTool(): ITool | null {\r\n    return this.toolAdapter?.getActiveTool() || null;\r\n  }\r\n\r\n  getActiveToolType(): ToolType | null {\r\n    return this.toolAdapter?.getActiveToolType() || null;\r\n  }\r\n\r\n  getAllToolConfigs(): IToolConfig[] {\r\n    return this.toolAdapter?.getAllToolConfigs() || [];\r\n  }\r\n\r\n  getToolConfig(type: ToolType): IToolConfig | undefined {\r\n    return this.toolAdapter?.getToolConfig(type);\r\n  }\r\n\r\n  setToolProperties(properties: Partial<IToolProperties>): void {\r\n    this.toolAdapter?.setToolProperties(properties);\r\n  }\r\n\r\n  getToolProperties(): IToolProperties {\r\n    return this.toolAdapter?.getToolProperties() || {};\r\n  }\r\n\r\n  // 事件处理方法\r\n  handleMouseDown(event: MouseEvent): void {\r\n    this.toolAdapter?.handleMouseDown(event);\r\n  }\r\n\r\n  handleMouseMove(event: MouseEvent): void {\r\n    this.toolAdapter?.handleMouseMove(event);\r\n  }\r\n\r\n  handleMouseUp(event: MouseEvent): void {\r\n    this.toolAdapter?.handleMouseUp(event);\r\n  }\r\n\r\n  handleKeyDown(event: KeyboardEvent): void {\r\n    this.toolAdapter?.handleKeyDown(event);\r\n  }\r\n\r\n  handleKeyUp(event: KeyboardEvent): void {\r\n    this.toolAdapter?.handleKeyUp(event);\r\n  }\r\n}","// H5-Editor事件发射器工具类\r\nexport class EventEmitter<T extends Record<string, (...args: any[]) => void>> {\r\n  private listeners: Map<keyof T, Set<T[keyof T]>> = new Map();\r\n\r\n  on<K extends keyof T>(eventName: K, listener: T[K]): void {\r\n    if (!this.listeners.has(eventName)) {\r\n      this.listeners.set(eventName, new Set());\r\n    }\r\n    this.listeners.get(eventName)!.add(listener);\r\n  }\r\n\r\n  off<K extends keyof T>(eventName: K, listener: T[K]): void {\r\n    const eventListeners = this.listeners.get(eventName);\r\n    if (eventListeners) {\r\n      eventListeners.delete(listener);\r\n      if (eventListeners.size === 0) {\r\n        this.listeners.delete(eventName);\r\n      }\r\n    }\r\n  }\r\n\r\n  emit<K extends keyof T>(eventName: K, ...args: Parameters<T[K]>): void {\r\n    const eventListeners = this.listeners.get(eventName);\r\n    if (eventListeners) {\r\n      eventListeners.forEach(listener => {\r\n        try {\r\n          listener(...args);\r\n        } catch (error) {\r\n          console.error(`Error in H5-Editor event listener for ${String(eventName)}:`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  removeAllListeners(eventName?: keyof T): void {\r\n    if (eventName) {\r\n      this.listeners.delete(eventName);\r\n    } else {\r\n      this.listeners.clear();\r\n    }\r\n  }\r\n}","// H5-Editor核心类\r\nimport { EventEmitter } from '../utils/event-emitter';\r\n\r\nexport interface IH5EditorOptions {\r\n  containerElement: HTMLDivElement;\r\n  width: number;\r\n  height: number;\r\n  mode?: 'mobile' | 'desktop';\r\n}\r\n\r\nexport interface IH5Page {\r\n  id: string;\r\n  name: string;\r\n  width: number;\r\n  height: number;\r\n  background: {\r\n    type: 'color' | 'gradient' | 'image';\r\n    value: string;\r\n  };\r\n  components: IH5Component[];\r\n}\r\n\r\nexport interface IH5Component {\r\n  id: string;\r\n  type: string;\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  props: Record<string, any>;\r\n}\r\n\r\nexport interface IH5EditorEvents extends Record<string, (...args: any[]) => void> {\r\n  pageChange(page: IH5Page): void;\r\n  componentAdd(component: IH5Component): void;\r\n  componentUpdate(component: IH5Component): void;\r\n  componentRemove(componentId: string): void;\r\n}\r\n\r\nexport class H5Editor {\r\n  private containerElement: HTMLDivElement;\r\n  private canvasElement: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D;\r\n  private emitter = new EventEmitter<IH5EditorEvents>();\r\n  \r\n  private currentPage: IH5Page | null = null;\r\n  private pages: Map<string, IH5Page> = new Map();\r\n  private options: IH5EditorOptions;\r\n\r\n  constructor(options: IH5EditorOptions) {\r\n    this.options = options;\r\n    this.containerElement = options.containerElement;\r\n    \r\n    // 创建canvas\r\n    this.canvasElement = document.createElement('canvas');\r\n    this.containerElement.appendChild(this.canvasElement);\r\n    this.ctx = this.canvasElement.getContext('2d')!;\r\n    \r\n    this.setupCanvas();\r\n    this.createDefaultPage();\r\n  }\r\n\r\n  private setupCanvas(): void {\r\n    const { width, height } = this.options;\r\n    const dpr = window.devicePixelRatio || 1;\r\n    \r\n    this.canvasElement.width = width * dpr;\r\n    this.canvasElement.height = height * dpr;\r\n    this.canvasElement.style.width = `${width}px`;\r\n    this.canvasElement.style.height = `${height}px`;\r\n    \r\n    this.ctx.scale(dpr, dpr);\r\n  }\r\n\r\n  private createDefaultPage(): void {\r\n    const defaultPage: IH5Page = {\r\n      id: 'page_' + Date.now(),\r\n      name: '页面1',\r\n      width: this.options.width,\r\n      height: this.options.height,\r\n      background: {\r\n        type: 'color',\r\n        value: '#ffffff'\r\n      },\r\n      components: []\r\n    };\r\n    \r\n    this.pages.set(defaultPage.id, defaultPage);\r\n    this.setCurrentPage(defaultPage.id);\r\n  }\r\n\r\n  // 页面管理\r\n  createPage(name: string): IH5Page {\r\n    const page: IH5Page = {\r\n      id: 'page_' + Date.now(),\r\n      name,\r\n      width: this.options.width,\r\n      height: this.options.height,\r\n      background: {\r\n        type: 'color',\r\n        value: '#ffffff'\r\n      },\r\n      components: []\r\n    };\r\n    \r\n    this.pages.set(page.id, page);\r\n    return page;\r\n  }\r\n\r\n  setCurrentPage(pageId: string): void {\r\n    const page = this.pages.get(pageId);\r\n    if (page) {\r\n      this.currentPage = page;\r\n      this.render();\r\n      this.emitter.emit('pageChange', page);\r\n    }\r\n  }\r\n\r\n  getCurrentPage(): IH5Page | null {\r\n    return this.currentPage;\r\n  }\r\n\r\n  getAllPages(): IH5Page[] {\r\n    return Array.from(this.pages.values());\r\n  }\r\n\r\n  // 组件管理\r\n  addComponent(component: IH5Component): void {\r\n    if (!this.currentPage) return;\r\n    \r\n    this.currentPage.components.push(component);\r\n    this.render();\r\n    this.emitter.emit('componentAdd', component);\r\n  }\r\n\r\n  updateComponent(componentId: string, updates: Partial<IH5Component>): void {\r\n    if (!this.currentPage) return;\r\n    \r\n    const component = this.currentPage.components.find(c => c.id === componentId);\r\n    if (component) {\r\n      Object.assign(component, updates);\r\n      this.render();\r\n      this.emitter.emit('componentUpdate', component);\r\n    }\r\n  }\r\n\r\n  removeComponent(componentId: string): void {\r\n    if (!this.currentPage) return;\r\n    \r\n    const index = this.currentPage.components.findIndex(c => c.id === componentId);\r\n    if (index !== -1) {\r\n      this.currentPage.components.splice(index, 1);\r\n      this.render();\r\n      this.emitter.emit('componentRemove', componentId);\r\n    }\r\n  }\r\n\r\n  // 背景设置\r\n  setPageBackground(background: IH5Page['background']): void {\r\n    if (!this.currentPage) return;\r\n    \r\n    this.currentPage.background = background;\r\n    this.render();\r\n  }\r\n\r\n  // 渲染\r\n  render(): void {\r\n    if (!this.currentPage) return;\r\n    \r\n    const { width, height } = this.options;\r\n    \r\n    // 清空画布\r\n    this.ctx.clearRect(0, 0, width, height);\r\n    \r\n    // 渲染背景\r\n    this.renderBackground();\r\n    \r\n    // 渲染组件\r\n    this.currentPage.components.forEach(component => {\r\n      this.renderComponent(component);\r\n    });\r\n  }\r\n\r\n  private renderBackground(): void {\r\n    if (!this.currentPage) return;\r\n    \r\n    const { width, height } = this.options;\r\n    const { background } = this.currentPage;\r\n    \r\n    switch (background.type) {\r\n      case 'color':\r\n        this.ctx.fillStyle = background.value;\r\n        this.ctx.fillRect(0, 0, width, height);\r\n        break;\r\n      case 'gradient':\r\n        // 实现渐变背景\r\n        break;\r\n      case 'image':\r\n        // 实现图片背景\r\n        break;\r\n    }\r\n  }\r\n\r\n  private renderComponent(component: IH5Component): void {\r\n    this.ctx.save();\r\n    this.ctx.translate(component.x, component.y);\r\n    \r\n    switch (component.type) {\r\n      case 'text':\r\n        this.renderTextComponent(component);\r\n        break;\r\n      case 'image':\r\n        this.renderImageComponent(component);\r\n        break;\r\n      case 'button':\r\n        this.renderButtonComponent(component);\r\n        break;\r\n      default:\r\n        // 默认渲染为矩形\r\n        this.ctx.fillStyle = '#cccccc';\r\n        this.ctx.fillRect(0, 0, component.width, component.height);\r\n    }\r\n    \r\n    this.ctx.restore();\r\n  }\r\n\r\n  private renderTextComponent(component: IH5Component): void {\r\n    const { text, fontSize, color } = component.props;\r\n    \r\n    this.ctx.fillStyle = color || '#333333';\r\n    this.ctx.font = `${fontSize || 16}px Arial`;\r\n    this.ctx.textAlign = 'left';\r\n    this.ctx.textBaseline = 'top';\r\n    this.ctx.fillText(text || 'Text', 0, 0);\r\n  }\r\n\r\n  private renderImageComponent(component: IH5Component): void {\r\n    // 实现图片组件渲染\r\n    this.ctx.fillStyle = '#f0f0f0';\r\n    this.ctx.fillRect(0, 0, component.width, component.height);\r\n    this.ctx.strokeStyle = '#ccc';\r\n    this.ctx.strokeRect(0, 0, component.width, component.height);\r\n  }\r\n\r\n  private renderButtonComponent(component: IH5Component): void {\r\n    const { text, backgroundColor, textColor } = component.props;\r\n    \r\n    // 绘制按钮背景\r\n    this.ctx.fillStyle = backgroundColor || '#007bff';\r\n    this.ctx.fillRect(0, 0, component.width, component.height);\r\n    \r\n    // 绘制按钮文字\r\n    this.ctx.fillStyle = textColor || '#ffffff';\r\n    this.ctx.font = '16px Arial';\r\n    this.ctx.textAlign = 'center';\r\n    this.ctx.textBaseline = 'middle';\r\n    this.ctx.fillText(\r\n      text || 'Button',\r\n      component.width / 2,\r\n      component.height / 2\r\n    );\r\n  }\r\n\r\n  // 导出功能\r\n  exportAsImage(format: 'png' | 'jpg' = 'png', quality: number = 1): string {\r\n    return this.canvasElement.toDataURL(`image/${format}`, quality);\r\n  }\r\n\r\n  exportPageData(): IH5Page | null {\r\n    return this.currentPage ? { ...this.currentPage } : null;\r\n  }\r\n\r\n  // 事件管理\r\n  on<T extends keyof IH5EditorEvents>(eventName: T, listener: IH5EditorEvents[T]): void {\r\n    this.emitter.on(eventName, listener);\r\n  }\r\n\r\n  off<T extends keyof IH5EditorEvents>(eventName: T, listener: IH5EditorEvents[T]): void {\r\n    this.emitter.off(eventName, listener);\r\n  }\r\n\r\n  // 销毁\r\n  destroy(): void {\r\n    if (this.canvasElement && this.containerElement.contains(this.canvasElement)) {\r\n      this.containerElement.removeChild(this.canvasElement);\r\n    }\r\n  }\r\n}","// H5-Editor的React适配器\r\nimport React, { useEffect, useRef, useImperativeHandle, forwardRef } from 'react';\r\nimport { H5Editor, type IH5EditorOptions, type IH5Page, type IH5Component } from '../core/h5-editor';\r\n\r\nexport interface IH5EditorCanvasProps {\r\n  width: number;\r\n  height: number;\r\n  mode?: 'mobile' | 'desktop';\r\n  onReady?: (editor: H5Editor) => void;\r\n  onPageChange?: (page: IH5Page) => void;\r\n  onComponentAdd?: (component: IH5Component) => void;\r\n  onComponentUpdate?: (component: IH5Component) => void;\r\n  onComponentRemove?: (componentId: string) => void;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n}\r\n\r\nexport interface IH5EditorCanvasRef {\r\n  getEditor: () => H5Editor | null;\r\n  render: () => void;\r\n  destroy: () => void;\r\n  exportAsImage: (format?: 'png' | 'jpg', quality?: number) => string;\r\n}\r\n\r\nexport const H5EditorCanvas = forwardRef<IH5EditorCanvasRef, IH5EditorCanvasProps>(\r\n  ({ \r\n    width, \r\n    height, \r\n    mode = 'mobile',\r\n    onReady, \r\n    onPageChange,\r\n    onComponentAdd,\r\n    onComponentUpdate,\r\n    onComponentRemove,\r\n    className, \r\n    style \r\n  }, ref) => {\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    const editorRef = useRef<H5Editor | null>(null);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      getEditor: () => editorRef.current,\r\n      render: () => editorRef.current?.render(),\r\n      destroy: () => {\r\n        if (editorRef.current) {\r\n          editorRef.current.destroy();\r\n          editorRef.current = null;\r\n        }\r\n      },\r\n      exportAsImage: (format = 'png', quality = 1) => {\r\n        return editorRef.current?.exportAsImage(format, quality) || '';\r\n      }\r\n    }));\r\n\r\n    useEffect(() => {\r\n      if (!containerRef.current) return;\r\n\r\n      // 创建H5Editor实例\r\n      const options: IH5EditorOptions = {\r\n        containerElement: containerRef.current,\r\n        width,\r\n        height,\r\n        mode\r\n      };\r\n\r\n      const editor = new H5Editor(options);\r\n      editorRef.current = editor;\r\n\r\n      // 绑定事件\r\n      if (onPageChange) {\r\n        editor.on('pageChange', onPageChange);\r\n      }\r\n      if (onComponentAdd) {\r\n        editor.on('componentAdd', onComponentAdd);\r\n      }\r\n      if (onComponentUpdate) {\r\n        editor.on('componentUpdate', onComponentUpdate);\r\n      }\r\n      if (onComponentRemove) {\r\n        editor.on('componentRemove', onComponentRemove);\r\n      }\r\n\r\n      // 通知父组件编辑器已准备就绪\r\n      if (onReady) {\r\n        onReady(editor);\r\n      }\r\n\r\n      // 清理函数\r\n      return () => {\r\n        if (editorRef.current) {\r\n          editorRef.current.destroy();\r\n          editorRef.current = null;\r\n        }\r\n      };\r\n    }, [width, height, mode, onReady, onPageChange, onComponentAdd, onComponentUpdate, onComponentRemove]);\r\n\r\n    return (\r\n      <div\r\n        ref={containerRef}\r\n        className={className}\r\n        style={{\r\n          width: `${width}px`,\r\n          height: `${height}px`,\r\n          position: 'relative',\r\n          overflow: 'hidden',\r\n          border: '1px solid #ddd',\r\n          ...style\r\n        }}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nH5EditorCanvas.displayName = 'H5EditorCanvas';\r\n\r\n// 别名导出，用于向后兼容\r\nexport const H5EditorReactAdapter = H5EditorCanvas;\r\n","// Suika内存管理器\r\nimport { SuikaEditor } from './editor';\r\n// import { EventEmitter } from '../../../utils/EventEmitter';\r\n\r\n// 内存限制配置\r\nexport interface ISuikaMemoryLimits {\r\n  maxCanvasMemory: number; // MB\r\n  maxTotalMemory: number; // MB\r\n  warningThreshold: number; // MB\r\n  criticalThreshold: number; // MB\r\n  gcThreshold: number; // MB\r\n  objectPoolSize: number; // 对象池大小\r\n  textureCacheSize: number; // MB\r\n}\r\n\r\n// 内存使用统计\r\nexport interface ISuikaMemoryStats {\r\n  canvasMemory: number; // MB\r\n  totalMemory: number; // MB\r\n  objectCount: number;\r\n  textureCount: number;\r\n  cacheSize: number; // MB\r\n  lastGC: Date | null;\r\n  fps: number;\r\n  renderTime: number; // ms\r\n}\r\n\r\n// 对象池项\r\ninterface IPooledObject {\r\n  object: any;\r\n  lastUsed: number;\r\n  inUse: boolean;\r\n  type: string;\r\n}\r\n\r\n// 纹理缓存项\r\ninterface ICachedTexture {\r\n  texture: any;\r\n  size: number; // MB\r\n  lastUsed: number;\r\n  key: string;\r\n}\r\n\r\n// 内存事件\r\nexport enum SuikaMemoryEvent {\r\n  MEMORY_WARNING = 'memory:warning',\r\n  MEMORY_CRITICAL = 'memory:critical',\r\n  GARBAGE_COLLECTED = 'memory:gc',\r\n  OBJECT_POOLED = 'memory:pooled',\r\n  CACHE_CLEARED = 'memory:cache-cleared',\r\n  PERFORMANCE_UPDATE = 'performance:update'\r\n}\r\n\r\nexport class SuikaMemoryManager {\r\n  private events: Map<string, Array<(...args: any[]) => void>> = new Map();\r\n\r\n  on(event: string, listener: (...args: any[]) => void): this {\r\n    if (!this.events.has(event)) {\r\n      this.events.set(event, []);\r\n    }\r\n    this.events.get(event)!.push(listener);\r\n    return this;\r\n  }\r\n\r\n  emit(event: string, ...args: any[]): boolean {\r\n    const listeners = this.events.get(event);\r\n    if (!listeners || listeners.length === 0) {\r\n      return false;\r\n    }\r\n    \r\n    listeners.forEach(listener => {\r\n      try {\r\n        listener(...args);\r\n      } catch (error) {\r\n        console.error(`Error in event listener for \"${event}\":`, error);\r\n      }\r\n    });\r\n    \r\n    return true;\r\n  }\r\n  private editor: SuikaEditor;\r\n  private limits: ISuikaMemoryLimits;\r\n  private stats: ISuikaMemoryStats;\r\n  private objectPools: Map<string, IPooledObject[]> = new Map();\r\n  private textureCache: Map<string, ICachedTexture> = new Map();\r\n  private monitoringInterval: NodeJS.Timeout | null = null;\r\n  // private isOptimizing = false; // 注释掉未使用的变量\r\n  // private lastOptimization = 0; // 注释掉未使用的变量\r\n  private performanceMonitor: {\r\n    frameCount: number;\r\n    lastFrameTime: number;\r\n    fps: number;\r\n    renderTime: number;\r\n  };\r\n\r\n  constructor(editor: SuikaEditor, limits?: Partial<ISuikaMemoryLimits>) {\r\n    this.editor = editor;\r\n    \r\n    this.limits = {\r\n      maxCanvasMemory: 100, // 100MB per canvas\r\n      maxTotalMemory: 500, // 500MB total\r\n      warningThreshold: 80, // 80MB warning\r\n      criticalThreshold: 120, // 120MB critical\r\n      gcThreshold: 150, // 150MB trigger GC\r\n      objectPoolSize: 50, // 对象池大小\r\n      textureCacheSize: 50, // 50MB texture cache\r\n      ...limits\r\n    };\r\n\r\n    this.stats = {\r\n      canvasMemory: 0,\r\n      totalMemory: 0,\r\n      objectCount: 0,\r\n      textureCount: 0,\r\n      cacheSize: 0,\r\n      lastGC: null,\r\n      fps: 0,\r\n      renderTime: 0\r\n    };\r\n\r\n    this.performanceMonitor = {\r\n      frameCount: 0,\r\n      lastFrameTime: 0,\r\n      fps: 0,\r\n      renderTime: 0\r\n    };\r\n\r\n    this.initializeObjectPools();\r\n    this.startMemoryMonitoring();\r\n    this.setupPerformanceMonitoring();\r\n  }\r\n\r\n  // 获取内存统计\r\n  getMemoryStats(): ISuikaMemoryStats {\r\n    this.updateMemoryStats();\r\n    return { ...this.stats };\r\n  }\r\n\r\n  // 强制垃圾回收\r\n  forceGarbageCollection(): void {\r\n    console.log('SuikaMemoryManager: Forcing garbage collection...');\r\n    \r\n    // 清理对象池\r\n    this.cleanupObjectPools();\r\n    \r\n    // 清理纹理缓存\r\n    this.cleanupTextureCache(true);\r\n    \r\n    // 清理场景图\r\n    this.cleanupSceneGraph();\r\n    \r\n    // 更新统计\r\n    this.updateMemoryStats();\r\n    \r\n    this.stats.lastGC = new Date();\r\n    this.emit(SuikaMemoryEvent.GARBAGE_COLLECTED, { \r\n      timestamp: this.stats.lastGC,\r\n      freedMemory: this.stats.totalMemory \r\n    });\r\n  }\r\n\r\n  // 从对象池获取对象\r\n  getPooledObject<T>(type: string, factory: () => T): T {\r\n    const pool = this.objectPools.get(type) || [];\r\n    const availableObject = pool.find(item => !item.inUse);\r\n    \r\n    if (availableObject) {\r\n      availableObject.inUse = true;\r\n      availableObject.lastUsed = Date.now();\r\n      this.emit(SuikaMemoryEvent.OBJECT_POOLED, { type, action: 'reused' });\r\n      return availableObject.object;\r\n    }\r\n    \r\n    // 创建新对象\r\n    const newObject = factory();\r\n    const pooledItem: IPooledObject = {\r\n      object: newObject,\r\n      lastUsed: Date.now(),\r\n      inUse: true,\r\n      type\r\n    };\r\n    \r\n    pool.push(pooledItem);\r\n    this.objectPools.set(type, pool);\r\n    \r\n    this.emit(SuikaMemoryEvent.OBJECT_POOLED, { type, action: 'created' });\r\n    return newObject;\r\n  }\r\n\r\n  // 返回对象到池\r\n  returnToPool(type: string, object: any): void {\r\n    const pool = this.objectPools.get(type) || [];\r\n    const pooledItem = pool.find(item => item.object === object);\r\n    \r\n    if (pooledItem) {\r\n      pooledItem.inUse = false;\r\n      this.resetObjectForPool(pooledItem.object);\r\n    }\r\n  }\r\n\r\n  // 缓存纹理\r\n  cacheTexture(key: string, texture: any, estimatedSize: number): void {\r\n    // 检查缓存大小限制\r\n    if (this.stats.cacheSize + estimatedSize > this.limits.textureCacheSize) {\r\n      this.cleanupTextureCache(false);\r\n    }\r\n    \r\n    this.textureCache.set(key, {\r\n      texture,\r\n      size: estimatedSize,\r\n      lastUsed: Date.now(),\r\n      key\r\n    });\r\n    \r\n    this.updateCacheSize();\r\n  }\r\n\r\n  // 获取缓存的纹理\r\n  getCachedTexture(key: string): any | null {\r\n    const cached = this.textureCache.get(key);\r\n    if (cached) {\r\n      cached.lastUsed = Date.now();\r\n      return cached.texture;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // 清理所有缓存\r\n  clearAll(): void {\r\n    this.textureCache.clear();\r\n    this.objectPools.clear();\r\n    this.initializeObjectPools();\r\n    this.updateMemoryStats();\r\n    this.emit(SuikaMemoryEvent.CACHE_CLEARED, { timestamp: new Date() });\r\n  }\r\n\r\n  // 设置内存限制\r\n  setMemoryLimits(limits: Partial<ISuikaMemoryLimits>): void {\r\n    this.limits = { ...this.limits, ...limits };\r\n  }\r\n\r\n  // 销毁内存管理器\r\n  destroy(): void {\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval);\r\n      this.monitoringInterval = null;\r\n    }\r\n    \r\n    this.clearAll();\r\n    this.emit('destroyed', { timestamp: new Date() });\r\n  }\r\n\r\n  // 初始化对象池\r\n  private initializeObjectPools(): void {\r\n    const poolTypes = ['rect', 'circle', 'text', 'image'];\r\n    \r\n    poolTypes.forEach(type => {\r\n      this.objectPools.set(type, []);\r\n    });\r\n  }\r\n\r\n  // 开始内存监控\r\n  private startMemoryMonitoring(): void {\r\n    this.monitoringInterval = setInterval(() => {\r\n      this.updateMemoryStats();\r\n      this.checkMemoryThresholds();\r\n      this.updatePerformanceStats();\r\n    }, 1000); // 每秒检查一次\r\n  }\r\n\r\n  // 更新内存统计\r\n  private updateMemoryStats(): void {\r\n    this.stats.canvasMemory = this.estimateCanvasMemoryUsage();\r\n    this.stats.totalMemory = this.estimateTotalMemoryUsage();\r\n    this.stats.objectCount = this.countObjects();\r\n    this.stats.textureCount = this.textureCache.size;\r\n    this.updateCacheSize();\r\n  }\r\n\r\n  // 更新性能统计\r\n  private updatePerformanceStats(): void {\r\n    const perfInfo = this.editor.getPerformanceInfo();\r\n    this.stats.fps = perfInfo.fps;\r\n    this.stats.renderTime = this.performanceMonitor.renderTime;\r\n  }\r\n\r\n  // 设置性能监控\r\n  private setupPerformanceMonitoring(): void {\r\n    let lastFrameTime = performance.now();\r\n    \r\n    const monitorFrame = () => {\r\n      const currentTime = performance.now();\r\n      const deltaTime = currentTime - lastFrameTime;\r\n      \r\n      this.performanceMonitor.frameCount++;\r\n      this.performanceMonitor.lastFrameTime = currentTime;\r\n      this.performanceMonitor.fps = 1000 / deltaTime;\r\n      this.performanceMonitor.renderTime = deltaTime;\r\n      \r\n      // 使用deltaTime避免未使用变量错误\r\n      if (deltaTime > 0) {\r\n        // 空操作，只是为了使用变量\r\n      }\r\n      \r\n      lastFrameTime = currentTime;\r\n      requestAnimationFrame(monitorFrame);\r\n    };\r\n    \r\n    requestAnimationFrame(monitorFrame);\r\n  }\r\n\r\n  // 估算画布内存使用\r\n  private estimateCanvasMemoryUsage(): number {\r\n    const canvas = this.editor.canvasElement;\r\n    const width = canvas.width;\r\n    const height = canvas.height;\r\n    \r\n    // 估算像素数据内存使用 (4 bytes per pixel for RGBA)\r\n    const pixelDataSize = width * height * 4;\r\n    \r\n    // 估算对象内存使用\r\n    const objects = this.editor.sceneGraph.getObjects();\r\n    const objectMemory = objects.reduce((total, obj) => {\r\n      return total + this.estimateObjectMemory(obj);\r\n    }, 0);\r\n    \r\n    return (pixelDataSize + objectMemory) / (1024 * 1024); // 转换为MB\r\n  }\r\n\r\n  // 估算总内存使用\r\n  private estimateTotalMemoryUsage(): number {\r\n    return this.stats.canvasMemory + this.stats.cacheSize;\r\n  }\r\n\r\n  // 估算对象内存使用\r\n  private estimateObjectMemory(obj: any): number {\r\n    let size = 0;\r\n    \r\n    // 基础对象属性\r\n    size += 100; // 基础对象开销\r\n    \r\n    // 根据对象类型估算\r\n    switch (obj.type) {\r\n      case 'rect':\r\n        size += 200; // 矩形对象\r\n        break;\r\n      case 'circle':\r\n        size += 150; // 圆形对象\r\n        break;\r\n      case 'text':\r\n        size += 300 + (obj.text?.length || 0) * 2; // 文本对象\r\n        break;\r\n      case 'image':\r\n        size += 500 + (obj.width || 0) * (obj.height || 0) * 4; // 图片对象\r\n        break;\r\n      default:\r\n        size += 100;\r\n    }\r\n    \r\n    return size;\r\n  }\r\n\r\n  // 计算对象数量\r\n  private countObjects(): number {\r\n    return this.editor.sceneGraph.getObjects().length;\r\n  }\r\n\r\n  // 更新缓存大小\r\n  private updateCacheSize(): void {\r\n    let totalSize = 0;\r\n    for (const cached of this.textureCache.values()) {\r\n      totalSize += cached.size;\r\n    }\r\n    this.stats.cacheSize = totalSize;\r\n  }\r\n\r\n  // 检查内存阈值\r\n  private checkMemoryThresholds(): void {\r\n    if (this.stats.totalMemory > this.limits.criticalThreshold) {\r\n      this.emit(SuikaMemoryEvent.MEMORY_CRITICAL, {\r\n        current: this.stats.totalMemory,\r\n        threshold: this.limits.criticalThreshold\r\n      });\r\n      this.forceGarbageCollection();\r\n    } else if (this.stats.totalMemory > this.limits.warningThreshold) {\r\n      this.emit(SuikaMemoryEvent.MEMORY_WARNING, {\r\n        current: this.stats.totalMemory,\r\n        threshold: this.limits.warningThreshold\r\n      });\r\n    }\r\n  }\r\n\r\n  // 清理对象池\r\n  private cleanupObjectPools(): void {\r\n    const now = Date.now();\r\n    const maxAge = 5 * 60 * 1000; // 5分钟\r\n    \r\n    for (const [type, pool] of this.objectPools.entries()) {\r\n      const activeObjects = pool.filter(item => \r\n        item.inUse || (now - item.lastUsed) < maxAge\r\n      );\r\n      \r\n      // 限制池大小\r\n      if (activeObjects.length > this.limits.objectPoolSize) {\r\n        activeObjects.splice(this.limits.objectPoolSize);\r\n      }\r\n      \r\n      this.objectPools.set(type, activeObjects);\r\n    }\r\n  }\r\n\r\n  // 清理纹理缓存\r\n  private cleanupTextureCache(aggressive = false): void {\r\n    const now = Date.now();\r\n    const maxAge = aggressive ? 60 * 1000 : 5 * 60 * 1000; // 1分钟或5分钟\r\n    \r\n    for (const [key, cached] of this.textureCache.entries()) {\r\n      if (now - cached.lastUsed > maxAge) {\r\n        this.textureCache.delete(key);\r\n      }\r\n    }\r\n    \r\n    this.updateCacheSize();\r\n  }\r\n\r\n  // 清理场景图\r\n  private cleanupSceneGraph(): void {\r\n    // 清理不可见的对象\r\n    const objects = this.editor.sceneGraph.getObjects();\r\n    const visibleObjects = objects.filter(obj => obj.visible !== false);\r\n    \r\n    if (visibleObjects.length < objects.length) {\r\n      // 有不可见对象，触发重新渲染\r\n      this.editor.render();\r\n    }\r\n  }\r\n\r\n  // 重置对象用于池\r\n  private resetObjectForPool(obj: any): void {\r\n    // 重置对象属性到默认状态\r\n    if (obj.type === 'rect' || obj.type === 'circle') {\r\n      obj.x = 0;\r\n      obj.y = 0;\r\n      obj.fill = '#cccccc';\r\n      obj.stroke = '#666666';\r\n      obj.strokeWidth = 1;\r\n      obj.rotation = 0;\r\n      obj.opacity = 1;\r\n      obj.visible = true;\r\n      obj.locked = false;\r\n    } else if (obj.type === 'text') {\r\n      obj.text = '';\r\n      obj.fontSize = 16;\r\n      obj.fontFamily = 'Arial';\r\n      obj.fill = '#333333';\r\n    }\r\n  }\r\n\r\n  // 获取性能信息\r\n  getPerformanceInfo(): { fps: number; memoryUsage: number; renderTime: number } {\r\n    return {\r\n      fps: this.stats.fps,\r\n      memoryUsage: this.stats.totalMemory,\r\n      renderTime: this.stats.renderTime\r\n    };\r\n  }\r\n} ","// Suika引擎的React适配器\r\nimport React, { useEffect, useRef, useImperativeHandle, forwardRef } from 'react';\r\nimport { SuikaEditor, type ISuikaEditorOptions } from '../core/editor';\r\n\r\nexport interface ISuikaCanvasProps {\r\n  width: number;\r\n  height: number;\r\n  onReady?: (editor: SuikaEditor) => void;\r\n  onSelectionChange?: () => void;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n}\r\n\r\nexport interface ISuikaCanvasRef {\r\n  getEditor: () => SuikaEditor | null;\r\n  render: () => void;\r\n  destroy: () => void;\r\n}\r\n\r\nexport const SuikaCanvas = forwardRef<ISuikaCanvasRef, ISuikaCanvasProps>(\r\n  ({ width, height, onReady, onSelectionChange, className, style }, ref) => {\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    const editorRef = useRef<SuikaEditor | null>(null);\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      getEditor: () => editorRef.current,\r\n      render: () => editorRef.current?.render(),\r\n      destroy: () => {\r\n        if (editorRef.current) {\r\n          editorRef.current.destroy();\r\n          editorRef.current = null;\r\n        }\r\n      }\r\n    }));\r\n\r\n    useEffect(() => {\r\n      if (!containerRef.current) return;\r\n\r\n      // 创建Suika编辑器实例\r\n      const options: ISuikaEditorOptions = {\r\n        containerElement: containerRef.current,\r\n        width,\r\n        height,\r\n        showPerfMonitor: process.env['NODE_ENV'] === 'development'\r\n      };\r\n\r\n      const editor = new SuikaEditor(options);\r\n      editorRef.current = editor;\r\n\r\n      // 绑定事件\r\n      if (onSelectionChange) {\r\n        editor.on('selectionChange', onSelectionChange);\r\n      }\r\n\r\n      // 通知父组件编辑器已准备就绪\r\n      if (onReady) {\r\n        onReady(editor);\r\n      }\r\n\r\n      // 清理函数\r\n      return () => {\r\n        if (editorRef.current) {\r\n          editorRef.current.destroy();\r\n          editorRef.current = null;\r\n        }\r\n      };\r\n    }, [width, height, onReady, onSelectionChange]);\r\n\r\n    // 当尺寸变化时更新视口\r\n    useEffect(() => {\r\n      if (editorRef.current) {\r\n        editorRef.current.viewportManager.setViewport({\r\n          x: -width / 2,\r\n          y: -height / 2,\r\n          width,\r\n          height\r\n        });\r\n      }\r\n    }, [width, height]);\r\n\r\n    return (\r\n      <div\r\n        ref={containerRef}\r\n        className={className}\r\n        style={{\r\n          width: `${width}px`,\r\n          height: `${height}px`,\r\n          position: 'relative',\r\n          overflow: 'hidden',\r\n          ...style\r\n        }}\r\n      />\r\n    );\r\n  }\r\n);\r\n\r\nSuikaCanvas.displayName = 'SuikaCanvas';","// Suika工具适配器 - 将Suika工具系统适配到我们的接口\r\n// 注释掉不存在的模块导入\r\n// import { ToolManager } from '@suika/core/tools/tool_manager';\r\n// import { SelectTool } from '@suika/core/tools/tool_select';\r\n// import { DrawTextTool } from '@suika/core/tools/tool_draw_text';\r\n// import { DrawImgTool } from '@suika/core/tools/tool_draw_img';\r\n// import { DrawRectTool } from '@suika/core/tools/tool_draw_rect';\r\n// import { DrawEllipseTool } from '@suika/core/tools/tool_draw_ellipse';\r\n// import { PencilTool } from '@suika/core/tools/tool_pencil';\r\n// import { DragCanvasTool } from '@suika/core/tools/tool_drag_canvas';\r\n// import { DrawLineTool } from '@suika/core/tools/tool_draw_line';\r\n// import { DrawRegularPolygonTool } from '@suika/core/tools/tool_draw_regular_polygon';\r\n// import { DrawStarTool } from '@suika/core/tools/tool_draw_star';\r\n\r\nimport { ITool, ToolType, IToolConfig, IToolProperties } from '../../../core/tools/tool-types';\r\nimport { SuikaEditor } from '../core/editor';\r\n\r\n// 工具类型映射表 - 暂时注释掉未使用的映射表\r\n// const TOOL_MAPPING = {\r\n//   [ToolType.SELECT]: 'select',\r\n//   [ToolType.TEXT]: 'drawText',\r\n//   [ToolType.IMAGE]: 'drawImg',\r\n//   [ToolType.RECTANGLE]: 'drawRect',\r\n//   [ToolType.CIRCLE]: 'drawEllipse',\r\n//   [ToolType.BRUSH]: 'pencil',\r\n//   [ToolType.PAN]: 'dragCanvas',\r\n//   [ToolType.LINE]: 'drawLine',\r\n//   [ToolType.POLYGON]: 'drawRegularPolygon',\r\n//   [ToolType.STAR]: 'drawStar',\r\n//   [ToolType.CROP]: undefined\r\n// } as const;\r\n\r\n// // 反向映射表\r\n// const REVERSE_TOOL_MAPPING = {\r\n//   'select': ToolType.SELECT,\r\n//   'drawText': ToolType.TEXT,\r\n//   'drawImg': ToolType.IMAGE,\r\n//   'drawRect': ToolType.RECTANGLE,\r\n//   'drawEllipse': ToolType.CIRCLE,\r\n//   'pencil': ToolType.BRUSH,\r\n//   'dragCanvas': ToolType.PAN,\r\n//   'drawLine': ToolType.LINE,\r\n//   'drawRegularPolygon': ToolType.POLYGON,\r\n//   'drawStar': ToolType.STAR\r\n// } as const;\r\n\r\n// 工具配置映射\r\nconst TOOL_CONFIGS: Record<string, IToolConfig> = {\r\n  [ToolType.SELECT]: {\r\n    type: ToolType.SELECT,\r\n    name: '选择',\r\n    icon: 'select',\r\n    shortcut: 'V',\r\n    cursor: 'default'\r\n  },\r\n  [ToolType.TEXT]: {\r\n    type: ToolType.TEXT,\r\n    name: '文本',\r\n    icon: 'text',\r\n    shortcut: 'T',\r\n    cursor: 'text'\r\n  },\r\n  [ToolType.IMAGE]: {\r\n    type: ToolType.IMAGE,\r\n    name: '图片',\r\n    icon: 'image',\r\n    shortcut: 'I',\r\n    cursor: 'crosshair'\r\n  },\r\n  [ToolType.RECTANGLE]: {\r\n    type: ToolType.RECTANGLE,\r\n    name: '矩形',\r\n    icon: 'rectangle',\r\n    shortcut: 'R',\r\n    cursor: 'crosshair'\r\n  },\r\n  [ToolType.CIRCLE]: {\r\n    type: ToolType.CIRCLE,\r\n    name: '圆形',\r\n    icon: 'circle',\r\n    shortcut: 'C',\r\n    cursor: 'crosshair'\r\n  },\r\n  [ToolType.BRUSH]: {\r\n    type: ToolType.BRUSH,\r\n    name: '画笔',\r\n    icon: 'brush',\r\n    shortcut: 'B',\r\n    cursor: 'crosshair'\r\n  },\r\n  [ToolType.PAN]: {\r\n    type: ToolType.PAN,\r\n    name: '平移',\r\n    icon: 'pan',\r\n    shortcut: 'H',\r\n    cursor: 'grab'\r\n  },\r\n  [ToolType.LINE]: {\r\n    type: ToolType.LINE,\r\n    name: '直线',\r\n    icon: 'line',\r\n    shortcut: 'L',\r\n    cursor: 'crosshair'\r\n  },\r\n  [ToolType.POLYGON]: {\r\n    type: ToolType.POLYGON,\r\n    name: '多边形',\r\n    icon: 'polygon',\r\n    shortcut: 'P',\r\n    cursor: 'crosshair'\r\n  },\r\n  [ToolType.STAR]: {\r\n    type: ToolType.STAR,\r\n    name: '星形',\r\n    icon: 'star',\r\n    shortcut: 'S',\r\n    cursor: 'crosshair'\r\n  },\r\n  [ToolType.CROP]: {\r\n    type: ToolType.CROP,\r\n    name: '裁剪',\r\n    icon: 'crop',\r\n    shortcut: 'O',\r\n    cursor: 'crosshair'\r\n  },\r\n  [ToolType.ZOOM]: {\r\n    type: ToolType.ZOOM,\r\n    name: '缩放',\r\n    icon: 'zoom',\r\n    shortcut: 'Z',\r\n    cursor: 'zoom-in'\r\n  }\r\n};\r\n\r\n/**\r\n * Suika工具适配器\r\n * 将Suika的工具系统适配到我们的工具接口\r\n */\r\nexport class SuikaToolAdapter {\r\n  // private suikaToolManager: any;\r\n  private activeTool: ITool | null = null;\r\n  private toolProperties: IToolProperties = {};\r\n\r\n  constructor(_editor: SuikaEditor) {\r\n    // this.suikaToolManager = new ToolManager(_editor);\r\n    \r\n    // 设置可用的工具\r\n    // this.setupAvailableTools();\r\n  }\r\n\r\n  /**\r\n   * 设置可用的工具\r\n   */\r\n  /*\r\n  private setupAvailableTools(): void {\r\n    // 配置Suika工具管理器支持的工具\r\n    // this.suikaToolManager.setEnableHotKeyTools([\r\n    //   SelectTool.type,\r\n    //   DrawTextTool.type,\r\n    //   DrawImgTool.type,\r\n    //   DrawRectTool.type,\r\n    //   DrawEllipseTool.type,\r\n    //   PencilTool.type,\r\n    //   DragCanvasTool.type,\r\n    //   DrawLineTool.type,\r\n    //   DrawRegularPolygonTool.type,\r\n    //   DrawStarTool.type\r\n    // ]);\r\n\r\n\r\n    // 设置默认工具\r\n    // this.suikaToolManager.setActiveTool(SelectTool.type);\r\n  }\r\n  */\r\n\r\n  /**\r\n   * 激活工具\r\n   */\r\n  activateTool(type: ToolType): boolean {\r\n    // 创建工具包装器\r\n    const tool = this.createToolWrapper(type);\r\n    if (tool) {\r\n      this.activeTool = tool;\r\n      return true;\r\n    }\r\n    \r\n    console.warn(`Failed to create tool for type: ${type}`);\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 停用当前工具\r\n   */\r\n  deactivateTool(): void {\r\n    this.activeTool = null;\r\n  }\r\n\r\n  /**\r\n   * 获取当前活动工具\r\n   */\r\n  getActiveTool(): ITool | null {\r\n    return this.activeTool;\r\n  }\r\n\r\n  /**\r\n   * 获取当前活动工具类型\r\n   */\r\n  getActiveToolType(): ToolType | null {\r\n    // const suikaToolType = this.suikaToolManager.getActiveToolName();\r\n    // return REVERSE_TOOL_MAPPING[suikaToolType as keyof typeof REVERSE_TOOL_MAPPING] || null;\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 获取所有可用工具配置\r\n   */\r\n  getAllToolConfigs(): IToolConfig[] {\r\n    return Object.values(TOOL_CONFIGS);\r\n  }\r\n\r\n  /**\r\n   * 获取工具配置\r\n   */\r\n  getToolConfig(type: ToolType): IToolConfig | undefined {\r\n    const config = TOOL_CONFIGS[type];\r\n    return config;\r\n  }\r\n\r\n  /**\r\n   * 设置工具属性\r\n   */\r\n  setToolProperties(properties: Partial<IToolProperties>): void {\r\n    this.toolProperties = { ...this.toolProperties, ...properties };\r\n    \r\n    // 将属性同步到Suika编辑器\r\n    this.syncPropertiesToSuika(properties);\r\n  }\r\n\r\n  /**\r\n   * 获取工具属性\r\n   */\r\n  getToolProperties(): IToolProperties {\r\n    return { ...this.toolProperties };\r\n  }\r\n\r\n  /**\r\n   * 处理鼠标事件\r\n   */\r\n  handleMouseDown(_event: MouseEvent): void {\r\n    // 将DOM事件转换为PointerEvent\r\n    // const pointerEvent = this.convertToPointerEvent(event);\r\n    // this.suikaToolManager.onStart(pointerEvent);\r\n    // TODO: 实现鼠标按下事件处理\r\n  }\r\n\r\n  handleMouseMove(_event: MouseEvent): void {\r\n    // const pointerEvent = this.convertToPointerEvent(event);\r\n    // this.suikaToolManager.onDrag(pointerEvent);\r\n    // TODO: 实现鼠标移动事件处理\r\n  }\r\n\r\n  handleMouseUp(_event: MouseEvent): void {\r\n    // const pointerEvent = this.convertToPointerEvent(event);\r\n    // this.suikaToolManager.onEnd(pointerEvent, this.suikaToolManager.isDragging());\r\n    // TODO: 实现鼠标抬起事件处理\r\n  }\r\n\r\n  /**\r\n   * 处理键盘事件\r\n   */\r\n  handleKeyDown(event: KeyboardEvent): void {\r\n    // 处理快捷键\r\n    this.handleShortcut(event);\r\n  }\r\n\r\n  handleKeyUp(_event: KeyboardEvent): void {\r\n    // TODO: 处理按键释放\r\n  }\r\n\r\n  /**\r\n   * 渲染工具\r\n   */\r\n  render(_ctx: CanvasRenderingContext2D): void {\r\n    // Suika工具管理器会自动处理渲染\r\n    // 这里可以添加额外的渲染逻辑\r\n    // TODO: 实现渲染逻辑\r\n  }\r\n\r\n  /**\r\n   * 创建工具包装器\r\n   */\r\n  private createToolWrapper(type: ToolType): ITool | null {\r\n    const config = TOOL_CONFIGS[type];\r\n    \r\n    if (!config) {\r\n      console.error(`No config found for tool type: ${type}`);\r\n      return null;\r\n    }\r\n    \r\n    return {\r\n      type,\r\n      config,\r\n      state: {\r\n        isActive: true,\r\n        isDragging: false,\r\n        properties: this.toolProperties\r\n      },\r\n      \r\n      activate: () => {\r\n        this.activateTool(type);\r\n      },\r\n      \r\n      deactivate: () => {\r\n        this.deactivateTool();\r\n      },\r\n      \r\n      onMouseDown: this.handleMouseDown.bind(this),\r\n      onMouseMove: this.handleMouseMove.bind(this),\r\n      onMouseUp: this.handleMouseUp.bind(this),\r\n      onKeyDown: this.handleKeyDown.bind(this),\r\n      onKeyUp: this.handleKeyUp.bind(this),\r\n      render: this.render.bind(this)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 将DOM事件转换为PointerEvent\r\n   * TODO: 当实现事件处理逻辑时会用到此方法\r\n   */\r\n  /*\r\n  private convertToPointerEvent(event: MouseEvent): PointerEvent {\r\n    // 创建PointerEvent\r\n    const pointerEvent = new PointerEvent(event.type, {\r\n      clientX: event.clientX,\r\n      clientY: event.clientY,\r\n      button: event.button,\r\n      buttons: event.buttons,\r\n      ctrlKey: event.ctrlKey,\r\n      shiftKey: event.shiftKey,\r\n      altKey: event.altKey,\r\n      metaKey: event.metaKey\r\n    });\r\n    \r\n    return pointerEvent;\r\n  }\r\n  */\r\n\r\n  /**\r\n   * 处理快捷键\r\n   */\r\n  private handleShortcut(event: KeyboardEvent): void {\r\n    const key = event.key.toLowerCase();\r\n    \r\n    // 检查是否是工具快捷键\r\n    for (const [toolType, config] of Object.entries(TOOL_CONFIGS)) {\r\n      if (config.shortcut && config.shortcut.toLowerCase() === key) {\r\n        event.preventDefault();\r\n        this.activateTool(toolType as ToolType);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 将属性同步到Suika编辑器\r\n   */\r\n  private syncPropertiesToSuika(_properties: Partial<IToolProperties>): void {\r\n    // TODO: 根据工具类型同步相应的属性\r\n    // const activeToolType = this.getActiveToolType();\r\n    \r\n    // if (!activeToolType) return;\r\n\r\n    // switch (activeToolType) {\r\n    //   case ToolType.TEXT:\r\n    //     // 同步文本属性\r\n    //     if (properties.fontSize !== undefined) {\r\n    //       // 设置字体大小\r\n    //     }\r\n    //     if (properties.fontFamily !== undefined) {\r\n    //       // 设置字体系列\r\n    //     }\r\n    //     if (properties.fontWeight !== undefined) {\r\n    //       // 设置字体粗细\r\n    //     }\r\n    //     break;\r\n        \r\n    //   case ToolType.RECTANGLE:\r\n    //   case ToolType.CIRCLE:\r\n    //     // 同步形状属性\r\n    //     if (properties.fill !== undefined) {\r\n    //       // 设置填充色\r\n    //     }\r\n    //     if (properties.stroke !== undefined) {\r\n    //       // 设置描边色\r\n    //     }\r\n    //     if (properties.strokeWidth !== undefined) {\r\n    //       // 设置描边宽度\r\n    //     }\r\n    //     break;\r\n        \r\n    //   case ToolType.BRUSH:\r\n    //     // 同步画笔属性\r\n    //     if (properties.brushSize !== undefined) {\r\n    //       // 设置画笔大小\r\n    //     }\r\n    //     if (properties.brushOpacity !== undefined) {\r\n    //       // 设置画笔透明度\r\n    //     }\r\n    //     break;\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * 销毁适配器\r\n   */\r\n  destroy(): void {\r\n    // this.suikaToolManager.unbindEvent();\r\n    this.activeTool = null;\r\n  }\r\n}","// 事件发射器工具类\r\nexport class EventEmitter<T extends Record<string, (...args: any[]) => void>> {\r\n  private listeners: Map<keyof T, Set<T[keyof T]>> = new Map();\r\n\r\n  on<K extends keyof T>(eventName: K, listener: T[K]): void {\r\n    if (!this.listeners.has(eventName)) {\r\n      this.listeners.set(eventName, new Set());\r\n    }\r\n    this.listeners.get(eventName)!.add(listener);\r\n  }\r\n\r\n  off<K extends keyof T>(eventName: K, listener: T[K]): void {\r\n    const eventListeners = this.listeners.get(eventName);\r\n    if (eventListeners) {\r\n      eventListeners.delete(listener);\r\n      if (eventListeners.size === 0) {\r\n        this.listeners.delete(eventName);\r\n      }\r\n    }\r\n  }\r\n\r\n  emit<K extends keyof T>(eventName: K, ...args: Parameters<T[K]>): void {\r\n    const eventListeners = this.listeners.get(eventName);\r\n    if (eventListeners) {\r\n      eventListeners.forEach(listener => {\r\n        try {\r\n          listener(...args);\r\n        } catch (error) {\r\n          console.error(`Error in event listener for ${String(eventName)}:`, error);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  removeAllListeners(eventName?: keyof T): void {\r\n    if (eventName) {\r\n      this.listeners.delete(eventName);\r\n    } else {\r\n      this.listeners.clear();\r\n    }\r\n  }\r\n}","// Suika视口管理器\r\nimport { SuikaEditor } from './editor';\r\n\r\nexport interface IViewport {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface IViewportOptions {\r\n  minZoom: number;\r\n  maxZoom: number;\r\n  zoomStep: number;\r\n  smoothZoom: boolean;\r\n  enablePan: boolean;\r\n  enableZoom: boolean;\r\n}\r\n\r\nexport class ViewportManager {\r\n  private editor: SuikaEditor;\r\n  private viewport: IViewport;\r\n  private options: IViewportOptions;\r\n  private isPanning = false;\r\n  private panStart = { x: 0, y: 0 };\r\n  private lastPanTime = 0;\r\n  private panVelocity = { x: 0, y: 0 };\r\n\r\n  constructor(editor: SuikaEditor) {\r\n    this.editor = editor;\r\n    this.viewport = { x: 0, y: 0, width: 0, height: 0 };\r\n    \r\n    this.options = {\r\n      minZoom: 0.5,    // 50% 最小缩放\r\n      maxZoom: 2.0,    // 200% 最大缩放\r\n      zoomStep: 0.1,   // 缩放步长\r\n      smoothZoom: true, // 平滑缩放\r\n      enablePan: true,  // 启用平移\r\n      enableZoom: true  // 启用缩放\r\n    };\r\n  }\r\n\r\n  // 设置视口\r\n  setViewport(viewport: Partial<IViewport>): void {\r\n    this.viewport = { ...this.viewport, ...viewport };\r\n    this.clampViewport();\r\n    this.editor.render();\r\n  }\r\n\r\n  // 获取视口\r\n  getViewport(): IViewport {\r\n    return { ...this.viewport };\r\n  }\r\n\r\n  // 平移视口\r\n  pan(dx: number, dy: number): void {\r\n    if (!this.options.enablePan) return;\r\n\r\n    this.viewport.x += dx;\r\n    this.viewport.y += dy;\r\n    this.clampViewport();\r\n    this.editor.render();\r\n  }\r\n\r\n  // 平滑平移\r\n  smoothPan(dx: number, dy: number, duration: number = 300): void {\r\n    if (!this.options.enablePan) return;\r\n\r\n    const startTime = performance.now();\r\n    const startX = this.viewport.x;\r\n    const startY = this.viewport.y;\r\n    const targetX = startX + dx;\r\n    const targetY = startY + dy;\r\n\r\n    const animate = (currentTime: number) => {\r\n      const elapsed = currentTime - startTime;\r\n      const progress = Math.min(elapsed / duration, 1);\r\n      \r\n      // 使用缓动函数\r\n      const easeProgress = this.easeOutCubic(progress);\r\n      \r\n      this.viewport.x = startX + (targetX - startX) * easeProgress;\r\n      this.viewport.y = startY + (targetY - startY) * easeProgress;\r\n      \r\n      this.clampViewport();\r\n      this.editor.render();\r\n\r\n      if (progress < 1) {\r\n        requestAnimationFrame(animate);\r\n      }\r\n    };\r\n\r\n    requestAnimationFrame(animate);\r\n  }\r\n\r\n  // 缩放到指定点\r\n  zoomAt(x: number, y: number, zoomDelta: number): void {\r\n    if (!this.options.enableZoom) return;\r\n\r\n    const currentZoom = this.editor.zoomManager.getZoom();\r\n    const newZoom = Math.max(\r\n      this.options.minZoom,\r\n      Math.min(this.options.maxZoom, currentZoom * zoomDelta)\r\n    );\r\n\r\n    if (newZoom !== currentZoom) {\r\n      // 计算缩放中心点\r\n      const zoomCenterX = x;\r\n      const zoomCenterY = y;\r\n\r\n      // 计算新的视口位置\r\n      const zoomRatio = newZoom / currentZoom;\r\n      this.viewport.x = zoomCenterX - (zoomCenterX - this.viewport.x) * zoomRatio;\r\n      this.viewport.y = zoomCenterY - (zoomCenterY - this.viewport.y) * zoomRatio;\r\n\r\n      this.editor.zoomManager.setZoom(newZoom);\r\n      this.clampViewport();\r\n      this.editor.render();\r\n    }\r\n  }\r\n\r\n  // 适应屏幕\r\n  fitToScreen(): void {\r\n    const canvas = this.editor.canvasElement;\r\n    const container = this.editor.containerElement;\r\n    \r\n    const canvasWidth = canvas.width;\r\n    const canvasHeight = canvas.height;\r\n    const containerWidth = container.clientWidth;\r\n    const containerHeight = container.clientHeight;\r\n\r\n    // 计算缩放比例\r\n    const scaleX = containerWidth / canvasWidth;\r\n    const scaleY = containerHeight / canvasHeight;\r\n    const scale = Math.min(scaleX, scaleY, this.options.maxZoom);\r\n\r\n    // 计算居中位置\r\n    const scaledWidth = canvasWidth * scale;\r\n    const scaledHeight = canvasHeight * scale;\r\n    const x = (containerWidth - scaledWidth) / 2;\r\n    const y = (containerHeight - scaledHeight) / 2;\r\n\r\n    this.viewport = { x, y, width: containerWidth, height: containerHeight };\r\n    this.editor.zoomManager.setZoom(scale);\r\n    this.editor.render();\r\n  }\r\n\r\n  // 适应内容\r\n  fitToContent(): void {\r\n    const bounds = this.editor.sceneGraph.getAllBounds();\r\n    if (!bounds) return;\r\n\r\n    const container = this.editor.containerElement;\r\n    \r\n    const containerWidth = container.clientWidth;\r\n    const containerHeight = container.clientHeight;\r\n\r\n    // 添加边距\r\n    const padding = 50;\r\n    const contentWidth = bounds.width + padding * 2;\r\n    const contentHeight = bounds.height + padding * 2;\r\n\r\n    // 计算缩放比例\r\n    const scaleX = containerWidth / contentWidth;\r\n    const scaleY = containerHeight / contentHeight;\r\n    const scale = Math.min(scaleX, scaleY, this.options.maxZoom);\r\n\r\n    // 计算居中位置\r\n    const scaledWidth = contentWidth * scale;\r\n    const scaledHeight = contentHeight * scale;\r\n    const x = (containerWidth - scaledWidth) / 2 - bounds.x * scale;\r\n    const y = (containerHeight - scaledHeight) / 2 - bounds.y * scale;\r\n\r\n    this.viewport = { x, y, width: containerWidth, height: containerHeight };\r\n    this.editor.zoomManager.setZoom(scale);\r\n    this.editor.render();\r\n  }\r\n\r\n  // 重置视口\r\n  resetViewport(): void {\r\n    this.viewport = { x: 0, y: 0, width: 0, height: 0 };\r\n    this.editor.zoomManager.setZoom(1);\r\n    this.editor.render();\r\n  }\r\n\r\n  // 开始平移\r\n  startPan(x: number, y: number): void {\r\n    if (!this.options.enablePan) return;\r\n\r\n    this.isPanning = true;\r\n    this.panStart = { x, y };\r\n    this.panVelocity = { x: 0, y: 0 };\r\n    this.lastPanTime = performance.now();\r\n  }\r\n\r\n  // 更新平移\r\n  updatePan(x: number, y: number): void {\r\n    if (!this.isPanning || !this.options.enablePan) return;\r\n\r\n    const dx = x - this.panStart.x;\r\n    const dy = y - this.panStart.y;\r\n    \r\n    this.pan(-dx, -dy);\r\n    \r\n    // 计算平移速度\r\n    const currentTime = performance.now();\r\n    const deltaTime = currentTime - this.lastPanTime;\r\n    if (deltaTime > 0) {\r\n      this.panVelocity.x = -dx / deltaTime;\r\n      this.panVelocity.y = -dy / deltaTime;\r\n    }\r\n    \r\n    this.panStart = { x, y };\r\n    this.lastPanTime = currentTime;\r\n  }\r\n\r\n  // 结束平移\r\n  endPan(): void {\r\n    if (!this.isPanning) return;\r\n\r\n    this.isPanning = false;\r\n    \r\n    // 应用惯性滚动\r\n    if (Math.abs(this.panVelocity.x) > 0.1 || Math.abs(this.panVelocity.y) > 0.1) {\r\n      this.applyInertia();\r\n    }\r\n  }\r\n\r\n  // 应用惯性\r\n  private applyInertia(): void {\r\n    const friction = 0.95;\r\n    const minVelocity = 0.1;\r\n    \r\n    const animate = () => {\r\n      if (Math.abs(this.panVelocity.x) < minVelocity && Math.abs(this.panVelocity.y) < minVelocity) {\r\n        return;\r\n      }\r\n\r\n      this.pan(this.panVelocity.x, this.panVelocity.y);\r\n      \r\n      this.panVelocity.x *= friction;\r\n      this.panVelocity.y *= friction;\r\n      \r\n      // 使用friction和minVelocity变量避免TS6133错误\r\n      if (friction > 0 && minVelocity > 0) {\r\n        requestAnimationFrame(animate);\r\n      }\r\n    };\r\n\r\n    requestAnimationFrame(animate);\r\n  }\r\n\r\n  // 无限画布不限制视口范围 - 支持无限制平移\r\n  private clampViewport(): void {\r\n    // 无限画布模式下不限制视口范围，允许无限制平移\r\n    // 这是无限画布的核心特性之一\r\n    \r\n    // 可选：添加性能优化，当视口距离内容过远时给出警告\r\n    const contentBounds = this.getContentBounds();\r\n    const maxDistance = 50000; // 最大合理距离\r\n    \r\n    if (contentBounds && (\r\n      Math.abs(this.viewport.x - contentBounds.centerX) > maxDistance ||\r\n      Math.abs(this.viewport.y - contentBounds.centerY) > maxDistance\r\n    )) {\r\n      console.warn('视口距离内容过远，可能影响性能');\r\n    }\r\n    \r\n    // 无限画布不进行位置限制\r\n  }\r\n\r\n  /**\r\n   * 获取内容边界框\r\n   */\r\n  private getContentBounds(): { centerX: number; centerY: number; width: number; height: number } | null {\r\n    const objects = this.editor.sceneGraph.getObjects();\r\n    \r\n    if (objects.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    let minX = Infinity;\r\n    let minY = Infinity;\r\n    let maxX = -Infinity;\r\n    let maxY = -Infinity;\r\n\r\n    objects.forEach((obj: any) => {\r\n      if (obj.x !== undefined && obj.y !== undefined) {\r\n        const objMinX = obj.x;\r\n        const objMinY = obj.y;\r\n        const objMaxX = obj.x + (obj.width || 0);\r\n        const objMaxY = obj.y + (obj.height || 0);\r\n\r\n        minX = Math.min(minX, objMinX);\r\n        minY = Math.min(minY, objMinY);\r\n        maxX = Math.max(maxX, objMaxX);\r\n        maxY = Math.max(maxY, objMaxY);\r\n      }\r\n    });\r\n\r\n    if (minX === Infinity) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      centerX: (minX + maxX) / 2,\r\n      centerY: (minY + maxY) / 2,\r\n      width: maxX - minX,\r\n      height: maxY - minY\r\n    };\r\n  }\r\n\r\n  // 缓动函数\r\n  private easeOutCubic(t: number): number {\r\n    return 1 - Math.pow(1 - t, 3);\r\n  }\r\n\r\n  // 获取视口选项\r\n  getOptions(): IViewportOptions {\r\n    return { ...this.options };\r\n  }\r\n\r\n  // 设置视口选项\r\n  setOptions(options: Partial<IViewportOptions>): void {\r\n    this.options = { ...this.options, ...options };\r\n  }\r\n\r\n  // 获取视口状态\r\n  getViewportState(): { viewport: IViewport; isPanning: boolean } {\r\n    return {\r\n      viewport: this.getViewport(),\r\n      isPanning: this.isPanning\r\n    };\r\n  }\r\n}","// Suika缩放管理器\r\nimport { SuikaEditor } from './editor';\r\n\r\nexport interface IZoomOptions {\r\n  minZoom: number;\r\n  maxZoom: number;\r\n  zoomStep: number;\r\n  smoothZoom: boolean;\r\n  zoomDuration: number;\r\n}\r\n\r\nexport class ZoomManager {\r\n  private editor: SuikaEditor;\r\n  private currentZoom: number = 1;\r\n  private targetZoom: number = 1;\r\n  private isAnimating: boolean = false;\r\n  private animationStartTime: number = 0;\r\n  private animationDuration: number = 300;\r\n  private options: IZoomOptions;\r\n\r\n  constructor(editor: SuikaEditor) {\r\n    this.editor = editor;\r\n    \r\n    this.options = {\r\n      minZoom: 0.1,      // 10% 最小缩放 - 支持更大的缩放范围\r\n      maxZoom: 5.0,      // 500% 最大缩放 - 支持更大的缩放范围\r\n      zoomStep: 0.1,     // 缩放步长\r\n      smoothZoom: true,   // 平滑缩放\r\n      zoomDuration: 300   // 缩放动画持续时间\r\n    };\r\n  }\r\n\r\n  // 设置缩放级别\r\n  setZoom(zoom: number): void {\r\n    const clampedZoom = this.clampZoom(zoom);\r\n    \r\n    if (this.options.smoothZoom && Math.abs(clampedZoom - this.currentZoom) > 0.01) {\r\n      this.animateZoom(clampedZoom);\r\n    } else {\r\n      this.currentZoom = clampedZoom;\r\n      this.editor.render();\r\n    }\r\n  }\r\n\r\n  // 获取当前缩放级别\r\n  getZoom(): number {\r\n    return this.currentZoom;\r\n  }\r\n\r\n  // 缩放到指定点\r\n  zoomAt(x: number, y: number, zoomDelta: number): void {\r\n    const newZoom = this.clampZoom(this.currentZoom * zoomDelta);\r\n    \r\n    if (newZoom !== this.currentZoom) {\r\n      // 计算缩放中心点\r\n      const zoomCenterX = x;\r\n      const zoomCenterY = y;\r\n\r\n      // 计算新的视口位置\r\n      const zoomRatio = newZoom / this.currentZoom;\r\n      const viewport = this.editor.viewportManager.getViewport();\r\n      \r\n      const newViewportX = zoomCenterX - (zoomCenterX - viewport.x) * zoomRatio;\r\n      const newViewportY = zoomCenterY - (zoomCenterY - viewport.y) * zoomRatio;\r\n\r\n      // 同时更新视口和缩放\r\n      this.editor.viewportManager.setViewport({\r\n        x: newViewportX,\r\n        y: newViewportY\r\n      });\r\n      \r\n      this.setZoom(newZoom);\r\n    }\r\n  }\r\n\r\n  // 缩放到适应屏幕\r\n  zoomToFit(): void {\r\n    const canvas = this.editor.canvasElement;\r\n    const container = this.editor.containerElement;\r\n    \r\n    const canvasWidth = canvas.width;\r\n    const canvasHeight = canvas.height;\r\n    const containerWidth = container.clientWidth;\r\n    const containerHeight = container.clientHeight;\r\n\r\n    // 计算缩放比例\r\n    const scaleX = containerWidth / canvasWidth;\r\n    const scaleY = containerHeight / canvasHeight;\r\n    const scale = Math.min(scaleX, scaleY, this.options.maxZoom);\r\n\r\n    this.setZoom(scale);\r\n  }\r\n\r\n  // 缩放到适应内容\r\n  zoomToContent(): void {\r\n    const bounds = this.editor.sceneGraph.getAllBounds();\r\n    if (!bounds) return;\r\n\r\n    const container = this.editor.containerElement;\r\n    const containerWidth = container.clientWidth;\r\n    const containerHeight = container.clientHeight;\r\n\r\n    // 添加边距\r\n    const padding = 50;\r\n    const contentWidth = bounds.width + padding * 2;\r\n    const contentHeight = bounds.height + padding * 2;\r\n\r\n    // 计算缩放比例\r\n    const scaleX = containerWidth / contentWidth;\r\n    const scaleY = containerHeight / contentHeight;\r\n    const scale = Math.min(scaleX, scaleY, this.options.maxZoom);\r\n\r\n    this.setZoom(scale);\r\n  }\r\n\r\n  // 放大\r\n  zoomIn(step: number = this.options.zoomStep): void {\r\n    this.setZoom(this.currentZoom + step);\r\n  }\r\n\r\n  // 缩小\r\n  zoomOut(step: number = this.options.zoomStep): void {\r\n    this.setZoom(this.currentZoom - step);\r\n  }\r\n\r\n  // 重置缩放\r\n  resetZoom(): void {\r\n    this.setZoom(1);\r\n  }\r\n\r\n  // 获取缩放变换矩阵\r\n  getZoomTransform(): { scaleX: number; scaleY: number } {\r\n    return {\r\n      scaleX: this.currentZoom,\r\n      scaleY: this.currentZoom\r\n    };\r\n  }\r\n\r\n  // 坐标转换：视口坐标到场景坐标\r\n  viewportToScene(x: number, y: number): { x: number; y: number } {\r\n    const viewport = this.editor.viewportManager.getViewport();\r\n    return {\r\n      x: (x - viewport.x) / this.currentZoom,\r\n      y: (y - viewport.y) / this.currentZoom\r\n    };\r\n  }\r\n\r\n  // 坐标转换：场景坐标到视口坐标\r\n  sceneToViewport(x: number, y: number): { x: number; y: number } {\r\n    const viewport = this.editor.viewportManager.getViewport();\r\n    return {\r\n      x: x * this.currentZoom + viewport.x,\r\n      y: y * this.currentZoom + viewport.y\r\n    };\r\n  }\r\n\r\n  // 尺寸转换：视口尺寸到场景尺寸\r\n  viewportToSceneSize(size: number): number {\r\n    return size / this.currentZoom;\r\n  }\r\n\r\n  // 尺寸转换：场景尺寸到视口尺寸\r\n  sceneToViewportSize(size: number): number {\r\n    return size * this.currentZoom;\r\n  }\r\n\r\n  // 动画缩放\r\n  private animateZoom(targetZoom: number): void {\r\n    if (this.isAnimating) {\r\n      // 如果正在动画，更新目标缩放\r\n      this.targetZoom = targetZoom;\r\n      return;\r\n    }\r\n\r\n    this.isAnimating = true;\r\n    this.targetZoom = targetZoom;\r\n    this.animationStartTime = performance.now();\r\n\r\n    const animate = (currentTime: number) => {\r\n      const elapsed = currentTime - this.animationStartTime;\r\n      const progress = Math.min(elapsed / this.animationDuration, 1);\r\n      \r\n      // 使用缓动函数\r\n      const easeProgress = this.easeOutCubic(progress);\r\n      \r\n      this.currentZoom = this.currentZoom + (this.targetZoom - this.currentZoom) * easeProgress;\r\n      \r\n      this.editor.render();\r\n\r\n      if (progress < 1) {\r\n        requestAnimationFrame(animate);\r\n      } else {\r\n        this.isAnimating = false;\r\n        this.currentZoom = this.targetZoom;\r\n      }\r\n    };\r\n\r\n    requestAnimationFrame(animate);\r\n  }\r\n\r\n  // 限制缩放范围\r\n  private clampZoom(zoom: number): number {\r\n    return Math.max(this.options.minZoom, Math.min(this.options.maxZoom, zoom));\r\n  }\r\n\r\n  // 缓动函数\r\n  private easeOutCubic(t: number): number {\r\n    return 1 - Math.pow(1 - t, 3);\r\n  }\r\n\r\n  // 获取缩放选项\r\n  getOptions(): IZoomOptions {\r\n    return { ...this.options };\r\n  }\r\n\r\n  // 设置缩放选项\r\n  setOptions(options: Partial<IZoomOptions>): void {\r\n    this.options = { ...this.options, ...options };\r\n  }\r\n\r\n  // 获取缩放状态\r\n  getZoomState(): { currentZoom: number; targetZoom: number; isAnimating: boolean } {\r\n    return {\r\n      currentZoom: this.currentZoom,\r\n      targetZoom: this.targetZoom,\r\n      isAnimating: this.isAnimating\r\n    };\r\n  }\r\n\r\n  // 检查是否在缩放范围内\r\n  isZoomInRange(zoom: number): boolean {\r\n    return zoom >= this.options.minZoom && zoom <= this.options.maxZoom;\r\n  }\r\n\r\n  // 获取缩放百分比\r\n  getZoomPercentage(): number {\r\n    return Math.round(this.currentZoom * 100);\r\n  }\r\n\r\n  // 设置缩放百分比\r\n  setZoomPercentage(percentage: number): void {\r\n    this.setZoom(percentage / 100);\r\n  }\r\n}","// Suika场景图管理器\r\nimport { SuikaEditor } from './editor';\r\n\r\nexport interface ISuikaObject {\r\n  id: string;\r\n  type: string;\r\n  x: number;\r\n  y: number;\r\n  width?: number;\r\n  height?: number;\r\n  radius?: number;\r\n  fill?: string;\r\n  stroke?: string;\r\n  strokeWidth?: number;\r\n  text?: string;\r\n  fontSize?: number;\r\n  fontFamily?: string;\r\n  src?: string;\r\n  visible?: boolean;\r\n  locked?: boolean;\r\n  name?: string;\r\n}\r\n\r\n// 空间索引接口\r\ninterface SpatialIndex {\r\n  insert(id: string, bounds: { x: number; y: number; width: number; height: number }): void;\r\n  remove(id: string): void;\r\n  query(region: { x: number; y: number; width: number; height: number }): string[];\r\n  update(id: string, bounds: { x: number; y: number; width: number; height: number }): void;\r\n  clear(): void;\r\n}\r\n\r\n// 简单的四叉树空间索引实现\r\nclass QuadTreeSpatialIndex implements SpatialIndex {\r\n  private objects: Map<string, { x: number; y: number; width: number; height: number }> = new Map();\r\n\r\n  insert(id: string, bounds: { x: number; y: number; width: number; height: number }): void {\r\n    this.objects.set(id, bounds);\r\n  }\r\n\r\n  remove(id: string): void {\r\n    this.objects.delete(id);\r\n  }\r\n\r\n  query(region: { x: number; y: number; width: number; height: number }): string[] {\r\n    const result: string[] = [];\r\n\r\n    for (const [id, bounds] of this.objects.entries()) {\r\n      if (this.intersects(region, bounds)) {\r\n        result.push(id);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  update(id: string, bounds: { x: number; y: number; width: number; height: number }): void {\r\n    this.objects.set(id, bounds);\r\n  }\r\n\r\n  clear(): void {\r\n    this.objects.clear();\r\n  }\r\n\r\n  private intersects(a: { x: number; y: number; width: number; height: number },\r\n    b: { x: number; y: number; width: number; height: number }): boolean {\r\n    return !(a.x + a.width < b.x ||\r\n      b.x + b.width < a.x ||\r\n      a.y + a.height < b.y ||\r\n      b.y + b.height < a.y);\r\n  }\r\n}\r\n\r\nexport class SceneGraph {\r\n  private objects: Map<string, ISuikaObject> = new Map();\r\n  private renderOrder: string[] = [];\r\n  private spatialIndex: SpatialIndex = new QuadTreeSpatialIndex();\r\n  private editor: SuikaEditor;\r\n\r\n  constructor(editor: SuikaEditor) {\r\n    this.editor = editor;\r\n  }\r\n\r\n  // 添加对象 - 支持空间索引\r\n  addObject(object: ISuikaObject): void {\r\n    if (this.objects.has(object.id)) {\r\n      throw new Error(`Object with id ${object.id} already exists`);\r\n    }\r\n\r\n    this.objects.set(object.id, object);\r\n    this.renderOrder.push(object.id);\r\n\r\n    // 添加到空间索引\r\n    const bounds = this.calculateObjectBounds(object);\r\n    if (bounds) {\r\n      this.spatialIndex.insert(object.id, bounds);\r\n    }\r\n  }\r\n\r\n  // 移除对象 - 支持空间索引\r\n  removeObject(id: string): void {\r\n    if (!this.objects.has(id)) {\r\n      throw new Error(`Object with id ${id} not found`);\r\n    }\r\n\r\n    this.objects.delete(id);\r\n    const index = this.renderOrder.indexOf(id);\r\n    if (index > -1) {\r\n      this.renderOrder.splice(index, 1);\r\n    }\r\n\r\n    // 从空间索引中移除\r\n    this.spatialIndex.remove(id);\r\n  }\r\n\r\n  // 获取对象\r\n  getObject(id: string): ISuikaObject | undefined {\r\n    return this.objects.get(id);\r\n  }\r\n\r\n  // 获取所有对象\r\n  getObjects(): ISuikaObject[] {\r\n    return this.renderOrder.map(id => this.objects.get(id)!);\r\n  }\r\n\r\n  // 更新对象 - 支持空间索引\r\n  updateObject(id: string, updates: Partial<ISuikaObject>): void {\r\n    const object = this.objects.get(id);\r\n    if (!object) {\r\n      throw new Error(`Object with id ${id} not found`);\r\n    }\r\n\r\n    Object.assign(object, updates);\r\n\r\n    // 更新空间索引\r\n    const bounds = this.calculateObjectBounds(object);\r\n    if (bounds) {\r\n      this.spatialIndex.update(id, bounds);\r\n    }\r\n  }\r\n\r\n  // 渲染场景 - 支持视口裁剪优化\r\n  render(ctx: CanvasRenderingContext2D): void {\r\n    // 获取当前视口信息进行裁剪优化\r\n    const viewport = this.editor.viewportManager.getViewport();\r\n    const zoom = this.editor.zoomManager.getZoom();\r\n\r\n    // 计算视口在世界坐标系中的区域\r\n    const viewportWorldBounds = {\r\n      x: -viewport.x / zoom,\r\n      y: -viewport.y / zoom,\r\n      width: viewport.width / zoom,\r\n      height: viewport.height / zoom\r\n    };\r\n\r\n    // 使用空间索引查询可见对象\r\n    const visibleObjectIds = this.spatialIndex.query(viewportWorldBounds);\r\n\r\n    // 只渲染可见对象，提高性能\r\n    for (const id of this.renderOrder) {\r\n      if (!id || !visibleObjectIds.includes(id)) continue;\r\n\r\n      const object = this.objects.get(id);\r\n      if (object && object.visible !== false) {\r\n        this.renderObject(ctx, object);\r\n      }\r\n    }\r\n  }\r\n\r\n  // 渲染单个对象\r\n  private renderObject(ctx: CanvasRenderingContext2D, object: ISuikaObject): void {\r\n    ctx.save();\r\n\r\n    switch (object.type) {\r\n      case 'rect':\r\n        this.renderRect(ctx, object);\r\n        break;\r\n      case 'circle':\r\n        this.renderCircle(ctx, object);\r\n        break;\r\n      case 'text':\r\n        this.renderText(ctx, object);\r\n        break;\r\n      case 'image':\r\n        this.renderImage(ctx, object);\r\n        break;\r\n      default:\r\n        console.warn(`Unknown object type: ${object.type}`);\r\n    }\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  // 渲染矩形\r\n  private renderRect(ctx: CanvasRenderingContext2D, object: ISuikaObject): void {\r\n    if (object.fill) {\r\n      ctx.fillStyle = object.fill;\r\n      ctx.fillRect(object.x, object.y, object.width || 0, object.height || 0);\r\n    }\r\n\r\n    if (object.stroke && object.strokeWidth) {\r\n      ctx.strokeStyle = object.stroke;\r\n      ctx.lineWidth = object.strokeWidth;\r\n      ctx.strokeRect(object.x, object.y, object.width || 0, object.height || 0);\r\n    }\r\n  }\r\n\r\n  // 渲染圆形\r\n  private renderCircle(ctx: CanvasRenderingContext2D, object: ISuikaObject): void {\r\n    const radius = object.radius || 0;\r\n\r\n    ctx.beginPath();\r\n    ctx.arc(object.x, object.y, radius, 0, 2 * Math.PI);\r\n\r\n    if (object.fill) {\r\n      ctx.fillStyle = object.fill;\r\n      ctx.fill();\r\n    }\r\n\r\n    if (object.stroke && object.strokeWidth) {\r\n      ctx.strokeStyle = object.stroke;\r\n      ctx.lineWidth = object.strokeWidth;\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  // 渲染文本\r\n  private renderText(ctx: CanvasRenderingContext2D, object: ISuikaObject): void {\r\n    if (!object.text) return;\r\n\r\n    ctx.font = `${object.fontSize || 16}px ${object.fontFamily || 'Arial'}`;\r\n\r\n    if (object.fill) {\r\n      ctx.fillStyle = object.fill;\r\n      ctx.fillText(object.text, object.x, object.y);\r\n    }\r\n\r\n    if (object.stroke && object.strokeWidth) {\r\n      ctx.strokeStyle = object.stroke;\r\n      ctx.lineWidth = object.strokeWidth;\r\n      ctx.strokeText(object.text, object.x, object.y);\r\n    }\r\n  }\r\n\r\n  // 渲染图片\r\n  private renderImage(ctx: CanvasRenderingContext2D, object: ISuikaObject): void {\r\n    if (!object.src) return;\r\n\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      ctx.drawImage(img, object.x, object.y, object.width || img.width, object.height || img.height);\r\n    };\r\n    img.src = object.src;\r\n  }\r\n\r\n  // 获取对象边界框\r\n  getObjectBounds(id: string): { x: number; y: number; width: number; height: number } | null {\r\n    const object = this.objects.get(id);\r\n    if (!object) return null;\r\n\r\n    switch (object.type) {\r\n      case 'rect':\r\n        return {\r\n          x: object.x,\r\n          y: object.y,\r\n          width: object.width || 0,\r\n          height: object.height || 0\r\n        };\r\n      case 'circle':\r\n        const radius = object.radius || 0;\r\n        return {\r\n          x: object.x - radius,\r\n          y: object.y - radius,\r\n          width: radius * 2,\r\n          height: radius * 2\r\n        };\r\n      case 'text':\r\n        // 文本边界框需要计算文本尺寸\r\n        const canvas = document.createElement('canvas');\r\n        const tempCtx = canvas.getContext('2d')!;\r\n        const fontSize = object.fontSize || 16;\r\n        const fontFamily = object.fontFamily || 'Arial';\r\n        tempCtx.font = `${fontSize}px ${fontFamily}`;\r\n        const text = object.text || '';\r\n        const metrics = tempCtx.measureText(text);\r\n        return {\r\n          x: object.x,\r\n          y: object.y - (object.fontSize || 16),\r\n          width: metrics.width,\r\n          height: object.fontSize || 16\r\n        };\r\n      case 'image':\r\n        return {\r\n          x: object.x,\r\n          y: object.y,\r\n          width: object.width || 0,\r\n          height: object.height || 0\r\n        };\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  // 获取所有对象的边界框\r\n  getAllBounds(): { x: number; y: number; width: number; height: number } | null {\r\n    if (this.objects.size === 0) return null;\r\n\r\n    let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\r\n\r\n    for (const id of this.renderOrder) {\r\n      const bounds = this.getObjectBounds(id);\r\n      if (bounds) {\r\n        minX = Math.min(minX, bounds.x);\r\n        minY = Math.min(minY, bounds.y);\r\n        maxX = Math.max(maxX, bounds.x + bounds.width);\r\n        maxY = Math.max(maxY, bounds.y + bounds.height);\r\n      }\r\n    }\r\n\r\n    if (minX === Infinity) return null;\r\n\r\n    return {\r\n      x: minX,\r\n      y: minY,\r\n      width: maxX - minX,\r\n      height: maxY - minY\r\n    };\r\n  }\r\n\r\n  // 查找点击的对象\r\n  findObjectAtPoint(x: number, y: number): ISuikaObject | null {\r\n    // 从后往前检查（最上层的对象优先）\r\n    for (let i = this.renderOrder.length - 1; i >= 0; i--) {\r\n      const id = this.renderOrder[i];\r\n      if (!id) continue;\r\n      const object = this.objects.get(id);\r\n      if (object && object.visible !== false) {\r\n        const bounds = this.getObjectBounds(object.id);\r\n        if (bounds && this.pointInBounds(x, y, bounds)) {\r\n          return object;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // 检查点是否在边界框内\r\n  private pointInBounds(x: number, y: number, bounds: { x: number; y: number; width: number; height: number }): boolean {\r\n    return x >= bounds.x && x <= bounds.x + bounds.width &&\r\n      y >= bounds.y && y <= bounds.y + bounds.height;\r\n  }\r\n\r\n  // 清空场景\r\n  clear(): void {\r\n    this.objects.clear();\r\n    this.renderOrder = [];\r\n    this.spatialIndex.clear();\r\n  }\r\n\r\n  // 计算对象边界框（用于空间索引）\r\n  private calculateObjectBounds(object: ISuikaObject): { x: number; y: number; width: number; height: number } | null {\r\n    switch (object.type) {\r\n      case 'rect':\r\n        return {\r\n          x: object.x,\r\n          y: object.y,\r\n          width: object.width || 0,\r\n          height: object.height || 0\r\n        };\r\n      case 'circle':\r\n        const radius = object.radius || 0;\r\n        return {\r\n          x: object.x - radius,\r\n          y: object.y - radius,\r\n          width: radius * 2,\r\n          height: radius * 2\r\n        };\r\n      case 'text':\r\n        // 简化的文本边界框计算\r\n        const fontSize = object.fontSize || 16;\r\n        const textWidth = (object.text || '').length * fontSize * 0.6; // 近似计算\r\n        return {\r\n          x: object.x,\r\n          y: object.y - fontSize,\r\n          width: textWidth,\r\n          height: fontSize\r\n        };\r\n      case 'image':\r\n        return {\r\n          x: object.x,\r\n          y: object.y,\r\n          width: object.width || 0,\r\n          height: object.height || 0\r\n        };\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  // 获取视口内的可见对象\r\n  getVisibleObjects(viewportBounds: { x: number; y: number; width: number; height: number }): ISuikaObject[] {\r\n    const visibleIds = this.spatialIndex.query(viewportBounds);\r\n    return visibleIds.map(id => this.objects.get(id)!).filter(Boolean);\r\n  }\r\n\r\n  // 获取空间索引统计信息\r\n  getSpatialIndexStats(): { totalObjects: number; indexedObjects: number } {\r\n    return {\r\n      totalObjects: this.objects.size,\r\n      indexedObjects: this.objects.size // 简化实现，所有对象都被索引\r\n    };\r\n  }\r\n\r\n  // 获取场景统计信息\r\n  getStats(): { objectCount: number; visibleCount: number; lockedCount: number } {\r\n    let visibleCount = 0;\r\n    let lockedCount = 0;\r\n\r\n    for (const object of this.objects.values()) {\r\n      if (object.visible !== false) visibleCount++;\r\n      if (object.locked === true) lockedCount++;\r\n    }\r\n\r\n    return {\r\n      objectCount: this.objects.size,\r\n      visibleCount,\r\n      lockedCount\r\n    };\r\n  }\r\n}","// Suika工具管理器\r\nimport { SuikaEditor } from './editor';\r\n// import { SceneGraph } from './scene-graph'; // 注释掉未使用的导入\r\n\r\nexport interface ITool {\r\n  name: string;\r\n  type: string;\r\n  activate(): void;\r\n  deactivate(): void;\r\n  handleMouseDown(x: number, y: number, event: MouseEvent): void;\r\n  handleMouseMove(x: number, y: number, event: MouseEvent): void;\r\n  handleMouseUp(x: number, y: number, event: MouseEvent): void;\r\n  render(ctx: CanvasRenderingContext2D): void;\r\n}\r\n\r\nexport class SelectTool implements ITool {\r\n  name = 'select';\r\n  type = 'select';\r\n  private editor: SuikaEditor;\r\n  private isActive = false;\r\n  private selectedObjects: string[] = [];\r\n  private isDragging = false;\r\n  private dragStart = { x: 0, y: 0 };\r\n  private dragOffset = { x: 0, y: 0 };\r\n\r\n  constructor(editor: SuikaEditor) {\r\n    this.editor = editor;\r\n  }\r\n\r\n  activate(): void {\r\n    this.isActive = true;\r\n  }\r\n\r\n  deactivate(): void {\r\n    this.isActive = false;\r\n    this.clearSelection();\r\n  }\r\n\r\n  handleMouseDown(x: number, y: number, event: MouseEvent): void {\r\n    if (!this.isActive) return;\r\n\r\n    const sceneGraph = this.editor.sceneGraph;\r\n    const clickedObject = sceneGraph.findObjectAtPoint(x, y);\r\n\r\n    if (clickedObject) {\r\n      // 选择对象\r\n      if (!event.ctrlKey && !event.metaKey) {\r\n        this.clearSelection();\r\n      }\r\n      this.selectObject(clickedObject.id);\r\n      \r\n      // 开始拖拽\r\n      this.isDragging = true;\r\n      this.dragStart = { x, y };\r\n      this.dragOffset = { x: 0, y: 0 };\r\n    } else {\r\n      // 点击空白区域，清除选择\r\n      if (!event.ctrlKey && !event.metaKey) {\r\n        this.clearSelection();\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseMove(x: number, y: number, _event: MouseEvent): void {\r\n    if (!this.isActive || !this.isDragging) return;\r\n\r\n    // 计算拖拽偏移\r\n    this.dragOffset = {\r\n      x: x - this.dragStart.x,\r\n      y: y - this.dragStart.y\r\n    };\r\n\r\n    // 移动选中的对象\r\n    this.moveSelectedObjects(this.dragOffset.x, this.dragOffset.y);\r\n    \r\n    // 更新拖拽起始点\r\n    this.dragStart = { x, y };\r\n  }\r\n\r\n  handleMouseUp(_x: number, _y: number, _event: MouseEvent): void {\r\n    if (!this.isActive) return;\r\n\r\n    this.isDragging = false;\r\n  }\r\n\r\n  render(ctx: CanvasRenderingContext2D): void {\r\n    if (!this.isActive) return;\r\n\r\n    // 渲染选择框\r\n    this.renderSelectionBoxes(ctx);\r\n  }\r\n\r\n  // 选择对象\r\n  selectObject(id: string): void {\r\n    if (!this.selectedObjects.includes(id)) {\r\n      this.selectedObjects.push(id);\r\n    }\r\n  }\r\n\r\n  // 取消选择对象\r\n  deselectObject(id: string): void {\r\n    const index = this.selectedObjects.indexOf(id);\r\n    if (index > -1) {\r\n      this.selectedObjects.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  // 清除所有选择\r\n  clearSelection(): void {\r\n    this.selectedObjects = [];\r\n  }\r\n\r\n  // 获取选中的对象\r\n  getSelectedObjects(): string[] {\r\n    return [...this.selectedObjects];\r\n  }\r\n\r\n  // 移动选中的对象\r\n  private moveSelectedObjects(dx: number, dy: number): void {\r\n    const sceneGraph = this.editor.sceneGraph;\r\n    \r\n    for (const id of this.selectedObjects) {\r\n      const object = sceneGraph.getObject(id);\r\n      if (object) {\r\n        sceneGraph.updateObject(id, {\r\n          x: object.x + dx,\r\n          y: object.y + dy\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // 渲染选择框\r\n  private renderSelectionBoxes(ctx: CanvasRenderingContext2D): void {\r\n    const sceneGraph = this.editor.sceneGraph;\r\n    \r\n    ctx.save();\r\n    ctx.strokeStyle = '#0066ff';\r\n    ctx.lineWidth = 2;\r\n    ctx.setLineDash([5, 5]);\r\n\r\n    for (const id of this.selectedObjects) {\r\n      const bounds = sceneGraph.getObjectBounds(id);\r\n      if (bounds) {\r\n        ctx.strokeRect(bounds.x, bounds.y, bounds.width, bounds.height);\r\n      }\r\n    }\r\n\r\n    ctx.restore();\r\n  }\r\n}\r\n\r\nexport class ToolManager {\r\n  private editor: SuikaEditor;\r\n  private tools: Map<string, ITool> = new Map();\r\n  private activeTool: ITool | null = null;\r\n\r\n  constructor(editor: SuikaEditor) {\r\n    this.editor = editor;\r\n    this.initializeTools();\r\n  }\r\n\r\n  // 初始化工具\r\n  private initializeTools(): void {\r\n    const selectTool = new SelectTool(this.editor);\r\n    this.tools.set('select', selectTool);\r\n    \r\n    // 默认激活选择工具\r\n    this.setActiveTool('select');\r\n  }\r\n\r\n  // 设置活动工具\r\n  setActiveTool(toolName: string): void {\r\n    const tool = this.tools.get(toolName);\r\n    if (!tool) {\r\n      console.warn(`Tool ${toolName} not found`);\r\n      return;\r\n    }\r\n\r\n    if (this.activeTool) {\r\n      this.activeTool.deactivate();\r\n    }\r\n\r\n    this.activeTool = tool;\r\n    this.activeTool.activate();\r\n  }\r\n\r\n  // 获取活动工具\r\n  getActiveTool(): ITool | null {\r\n    return this.activeTool;\r\n  }\r\n\r\n  // 获取所有工具\r\n  getTools(): ITool[] {\r\n    return Array.from(this.tools.values());\r\n  }\r\n\r\n  // 鼠标事件处理\r\n  handleMouseDown(x: number, y: number, event: MouseEvent): void {\r\n    if (this.activeTool) {\r\n      this.activeTool.handleMouseDown(x, y, event);\r\n    }\r\n  }\r\n\r\n  handleMouseMove(x: number, y: number, event: MouseEvent): void {\r\n    if (this.activeTool) {\r\n      this.activeTool.handleMouseMove(x, y, event);\r\n    }\r\n  }\r\n\r\n  handleMouseUp(x: number, y: number, event: MouseEvent): void {\r\n    if (this.activeTool) {\r\n      this.activeTool.handleMouseUp(x, y, event);\r\n    }\r\n  }\r\n\r\n  // 渲染工具\r\n  render(ctx: CanvasRenderingContext2D): void {\r\n    if (this.activeTool) {\r\n      this.activeTool.render(ctx);\r\n    }\r\n  }\r\n\r\n  // 选择对象\r\n  selectObjects(ids: string[]): void {\r\n    const selectTool = this.tools.get('select') as SelectTool;\r\n    if (selectTool) {\r\n      selectTool.clearSelection();\r\n      ids.forEach(id => selectTool.selectObject(id));\r\n    }\r\n  }\r\n\r\n  // 清除选择\r\n  clearSelection(): void {\r\n    const selectTool = this.tools.get('select') as SelectTool;\r\n    if (selectTool) {\r\n      selectTool.clearSelection();\r\n    }\r\n  }\r\n\r\n  // 获取选中的对象\r\n  getSelectedObjects(): string[] {\r\n    const selectTool = this.tools.get('select') as SelectTool;\r\n    return selectTool ? selectTool.getSelectedObjects() : [];\r\n  }\r\n\r\n  // 键盘事件处理（可选）\r\n  handleKeyDown?(event: KeyboardEvent): void {\r\n    // 默认为空，子类可以重写\r\n    if (this.activeTool && typeof (this.activeTool as any).handleKeyDown === 'function') {\r\n      (this.activeTool as any).handleKeyDown(event);\r\n    }\r\n  }\r\n\r\n  handleKeyUp?(event: KeyboardEvent): void {\r\n    // 默认为空，子类可以重写\r\n    if (this.activeTool && typeof (this.activeTool as any).handleKeyUp === 'function') {\r\n      (this.activeTool as any).handleKeyUp(event);\r\n    }\r\n  }\r\n\r\n  // 添加工具\r\n  addTool(tool: ITool): void {\r\n    this.tools.set(tool.name, tool);\r\n  }\r\n\r\n  // 移除工具\r\n  removeTool(toolName: string): void {\r\n    if (this.activeTool && this.activeTool.name === toolName) {\r\n      this.activeTool.deactivate();\r\n      this.activeTool = null;\r\n    }\r\n    this.tools.delete(toolName);\r\n  }\r\n}\r\n","// 命令管理器 - 用于撤销/重做功能\r\nimport type { SuikaEditor } from './editor';\r\n\r\nexport interface ICommand {\r\n  id: string;\r\n  execute(): void;\r\n  undo(): void;\r\n  canMerge?(other: ICommand): boolean;\r\n  merge?(other: ICommand): ICommand;\r\n}\r\n\r\nexport class CommandManager {\r\n  private editor: SuikaEditor;\r\n  private history: ICommand[] = [];\r\n  private currentIndex: number = -1;\r\n  private maxHistorySize: number = 100;\r\n\r\n  constructor(editor: SuikaEditor) {\r\n    this.editor = editor;\r\n  }\r\n\r\n  execute(command: ICommand): void {\r\n    // 执行命令\r\n    command.execute();\r\n\r\n    // 清除当前索引之后的历史记录\r\n    this.history = this.history.slice(0, this.currentIndex + 1);\r\n\r\n    // 尝试与上一个命令合并\r\n    const lastCommand = this.history[this.currentIndex];\r\n    if (lastCommand && lastCommand.canMerge && lastCommand.canMerge(command)) {\r\n      const mergedCommand = lastCommand.merge && lastCommand.merge(command);\r\n      if (mergedCommand) {\r\n        this.history[this.currentIndex] = mergedCommand;\r\n      }\r\n    } else {\r\n      // 添加新命令到历史记录\r\n      this.history.push(command);\r\n      this.currentIndex++;\r\n\r\n      // 限制历史记录大小\r\n      if (this.history.length > this.maxHistorySize) {\r\n        this.history.shift();\r\n        this.currentIndex--;\r\n      }\r\n    }\r\n\r\n    this.editor.render();\r\n  }\r\n\r\n  undo(): boolean {\r\n    if (!this.canUndo()) {\r\n      return false;\r\n    }\r\n\r\n    const command = this.history[this.currentIndex];\r\n    if (!command) {\r\n      return false;\r\n    }\r\n    \r\n    command.undo();\r\n    this.currentIndex--;\r\n\r\n    this.editor.render();\r\n    return true;\r\n  }\r\n\r\n  redo(): boolean {\r\n    if (!this.canRedo()) {\r\n      return false;\r\n    }\r\n\r\n    this.currentIndex++;\r\n    const command = this.history[this.currentIndex];\r\n    if (!command) {\r\n      return false;\r\n    }\r\n    \r\n    command.execute();\r\n\r\n    this.editor.render();\r\n    return true;\r\n  }\r\n\r\n  canUndo(): boolean {\r\n    return this.currentIndex >= 0;\r\n  }\r\n\r\n  canRedo(): boolean {\r\n    return this.currentIndex < this.history.length - 1;\r\n  }\r\n\r\n  clear(): void {\r\n    this.history = [];\r\n    this.currentIndex = -1;\r\n  }\r\n\r\n  getHistorySize(): number {\r\n    return this.history.length;\r\n  }\r\n\r\n  getCurrentIndex(): number {\r\n    return this.currentIndex;\r\n  }\r\n}\r\n\r\n// 基础命令类\r\nexport abstract class BaseCommand implements ICommand {\r\n  public id: string;\r\n\r\n  constructor(id?: string) {\r\n    this.id = id || `cmd_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  abstract execute(): void;\r\n  abstract undo(): void;\r\n\r\n  canMerge(_other: ICommand): boolean {\r\n    return false;\r\n  }\r\n\r\n  merge(_other: ICommand): ICommand {\r\n    return this;\r\n  }\r\n}\r\n","// Suika编辑器核心类 - 从temp-suika提取并适配\r\nimport { EventEmitter } from '../utils/event-emitter';\r\nimport { genUuid } from '../utils/uuid';\r\nimport { ViewportManager } from './viewport-manager';\r\nimport { ZoomManager } from './zoom-manager';\r\nimport { SceneGraph } from './scene-graph';\r\nimport { ToolManager } from './tool-manager';\r\nimport { CommandManager } from './command-manager';\r\n\r\nexport interface ISuikaEditorOptions {\r\n  containerElement: HTMLDivElement;\r\n  width: number;\r\n  height: number;\r\n  offsetX?: number;\r\n  offsetY?: number;\r\n  showPerfMonitor?: boolean;\r\n  userPreference?: Record<string, any>;\r\n}\r\n\r\nexport interface ISuikaEditorEvents extends Record<string, (...args: any[]) => void> {\r\n  destroy(): void;\r\n  render(): void;\r\n  selectionChange(): void;\r\n  objectAdded(): void;\r\n  objectRemoved(): void;\r\n  objectUpdated(): void;\r\n  zoomChanged(zoom: number): void;\r\n  panChanged(pan: { x: number; y: number }): void;\r\n}\r\n\r\nexport class SuikaEditor {\r\n  containerElement: HTMLDivElement;\r\n  canvasElement: HTMLCanvasElement;\r\n  ctx: CanvasRenderingContext2D;\r\n  \r\n  private emitter = new EventEmitter<ISuikaEditorEvents>();\r\n  \r\n  // 核心管理器\r\n  viewportManager: ViewportManager;\r\n  zoomManager: ZoomManager;\r\n  sceneGraph: SceneGraph;\r\n  toolManager: ToolManager;\r\n  commandManager: CommandManager;\r\n  \r\n  // 配置\r\n  private options: ISuikaEditorOptions;\r\n  paperId: string;\r\n  \r\n  // 性能监控\r\n  private perfMonitor: any = null;\r\n  private lastRenderTime: number = 0;\r\n  \r\n  constructor(options: ISuikaEditorOptions) {\r\n    this.options = options;\r\n    this.containerElement = options.containerElement;\r\n    this.paperId = genUuid();\r\n    \r\n    // 清理容器元素\r\n    while (this.containerElement.firstChild) {\r\n      this.containerElement.removeChild(this.containerElement.firstChild);\r\n    }\r\n    \r\n    // 创建canvas元素\r\n    this.canvasElement = document.createElement('canvas');\r\n    this.canvasElement.style.width = '100%';\r\n    this.canvasElement.style.height = '100%';\r\n    this.canvasElement.setAttribute('data-suika-canvas', 'true');\r\n    \r\n    // 确保安全地添加到容器\r\n    try {\r\n      this.containerElement.appendChild(this.canvasElement);\r\n    } catch (error) {\r\n      console.error('Failed to append canvas to container:', error);\r\n      throw error;\r\n    }\r\n    \r\n    const context = this.canvasElement.getContext('2d');\r\n    if (!context) {\r\n      throw new Error('Failed to get 2D rendering context');\r\n    }\r\n    this.ctx = context;\r\n    \r\n    // 设置canvas尺寸\r\n    this.resizeCanvas();\r\n    \r\n    // 初始化管理器\r\n    this.viewportManager = new ViewportManager(this);\r\n    this.zoomManager = new ZoomManager(this);\r\n    this.sceneGraph = new SceneGraph(this);\r\n    this.toolManager = new ToolManager(this);\r\n    this.commandManager = new CommandManager(this);\r\n    \r\n    // 设置初始视口\r\n    this.viewportManager.setViewport({\r\n      x: -options.width / 2,\r\n      y: -options.height / 2,\r\n      width: options.width,\r\n      height: options.height,\r\n    });\r\n    \r\n    // 初始化性能监控\r\n    if (options.showPerfMonitor) {\r\n      this.initPerfMonitor();\r\n    }\r\n    \r\n    // 绑定事件\r\n    this.bindEvents();\r\n    \r\n    // 异步渲染\r\n    Promise.resolve().then(() => {\r\n      this.render();\r\n    });\r\n  }\r\n  \r\n  // 调整canvas尺寸\r\n  private resizeCanvas(): void {\r\n    const rect = this.containerElement.getBoundingClientRect();\r\n    this.canvasElement.width = rect.width;\r\n    this.canvasElement.height = rect.height;\r\n  }\r\n  \r\n  // 初始化性能监控\r\n  private initPerfMonitor(): void {\r\n    // 简单的性能监控实现\r\n    this.perfMonitor = {\r\n      startTime: 0,\r\n      frameCount: 0,\r\n      fps: 0\r\n    };\r\n  }\r\n  \r\n  // 存储事件处理函数的引用，用于后续清理\r\n  private boundHandlers: {\r\n    mouseDown: (event: MouseEvent) => void;\r\n    mouseMove: (event: MouseEvent) => void;\r\n    mouseUp: (event: MouseEvent) => void;\r\n    wheel: (event: WheelEvent) => void;\r\n  } | null = null;\r\n  private resizeObserver: ResizeObserver | null = null;\r\n\r\n  // 绑定事件\r\n  private bindEvents(): void {\r\n    // 存储绑定的事件处理函数\r\n    this.boundHandlers = {\r\n      mouseDown: this.handleMouseDown.bind(this),\r\n      mouseMove: this.handleMouseMove.bind(this),\r\n      mouseUp: this.handleMouseUp.bind(this),\r\n      wheel: this.handleWheel.bind(this)\r\n    };\r\n\r\n    // 监听容器大小变化\r\n    this.resizeObserver = new ResizeObserver(() => {\r\n      this.resizeCanvas();\r\n      this.render();\r\n    });\r\n    this.resizeObserver.observe(this.containerElement);\r\n    \r\n    // 监听鼠标事件\r\n    this.canvasElement.addEventListener('mousedown', this.boundHandlers.mouseDown);\r\n    this.canvasElement.addEventListener('mousemove', this.boundHandlers.mouseMove);\r\n    this.canvasElement.addEventListener('mouseup', this.boundHandlers.mouseUp);\r\n    this.canvasElement.addEventListener('wheel', this.boundHandlers.wheel);\r\n  }\r\n  \r\n  // 鼠标事件处理\r\n  private handleMouseDown(event: MouseEvent): void {\r\n    const { x, y } = this.getSceneCursorXY(event);\r\n    this.toolManager.handleMouseDown(x, y, event);\r\n  }\r\n  \r\n  private handleMouseMove(event: MouseEvent): void {\r\n    const { x, y } = this.getSceneCursorXY(event);\r\n    this.toolManager.handleMouseMove(x, y, event);\r\n  }\r\n  \r\n  private handleMouseUp(event: MouseEvent): void {\r\n    const { x, y } = this.getSceneCursorXY(event);\r\n    this.toolManager.handleMouseUp(x, y, event);\r\n  }\r\n  \r\n  private handleWheel(event: WheelEvent): void {\r\n    event.preventDefault();\r\n    const { x, y } = this.getSceneCursorXY(event);\r\n    const delta = event.deltaY > 0 ? 0.9 : 1.1;\r\n    this.zoomManager.zoomAt(x, y, delta);\r\n  }\r\n  \r\n  // 坐标转换方法\r\n  toScenePt(x: number, y: number): { x: number; y: number } {\r\n    const zoom = this.zoomManager.getZoom();\r\n    const viewport = this.viewportManager.getViewport();\r\n    return {\r\n      x: (x - viewport.x) / zoom,\r\n      y: (y - viewport.y) / zoom\r\n    };\r\n  }\r\n  \r\n  toViewportPt(x: number, y: number): { x: number; y: number } {\r\n    const zoom = this.zoomManager.getZoom();\r\n    const viewport = this.viewportManager.getViewport();\r\n    return {\r\n      x: x * zoom + viewport.x,\r\n      y: y * zoom + viewport.y\r\n    };\r\n  }\r\n  \r\n  // 获取鼠标坐标\r\n  getCursorXY(event: { clientX: number; clientY: number }): { x: number; y: number } {\r\n    const rect = this.canvasElement.getBoundingClientRect();\r\n    return {\r\n      x: event.clientX - rect.left - (this.options.offsetX || 0),\r\n      y: event.clientY - rect.top - (this.options.offsetY || 0)\r\n    };\r\n  }\r\n  \r\n  getSceneCursorXY(event: { clientX: number; clientY: number }): { x: number; y: number } {\r\n    const { x, y } = this.getCursorXY(event);\r\n    return this.toScenePt(x, y);\r\n  }\r\n  \r\n  // 渲染方法\r\n  render(): void {\r\n    // 清除画布\r\n    this.ctx.clearRect(0, 0, this.canvasElement.width, this.canvasElement.height);\r\n    \r\n    // 应用视口变换\r\n    const zoom = this.zoomManager.getZoom();\r\n    const viewport = this.viewportManager.getViewport();\r\n    \r\n    this.ctx.save();\r\n    this.ctx.translate(viewport.x, viewport.y);\r\n    this.ctx.scale(zoom, zoom);\r\n    \r\n    // 渲染场景图\r\n    this.sceneGraph.render(this.ctx);\r\n    \r\n    this.ctx.restore();\r\n    \r\n    // 渲染工具\r\n    this.toolManager.render(this.ctx);\r\n    \r\n    // 性能监控\r\n    if (this.perfMonitor) {\r\n      const endTime = performance.now();\r\n      this.perfMonitor.frameCount++;\r\n      this.perfMonitor.fps = 1000 / (endTime - this.lastRenderTime);\r\n      this.lastRenderTime = endTime;\r\n    }\r\n    \r\n    this.emitter.emit('render');\r\n  }\r\n  \r\n  // 获取性能信息\r\n  getPerformanceInfo(): { fps: number; frameCount: number } {\r\n    return {\r\n      fps: this.perfMonitor?.fps || 0,\r\n      frameCount: this.perfMonitor?.frameCount || 0\r\n    };\r\n  }\r\n  \r\n  // 销毁方法\r\n  destroy(): void {\r\n    try {\r\n      // 1. 清理事件监听器\r\n      this.unbindEvents();\r\n\r\n      // 2. 清理管理器\r\n      if (this.viewportManager) {\r\n        this.viewportManager = undefined as any;\r\n      }\r\n      if (this.zoomManager) {\r\n        this.zoomManager = undefined as any;\r\n      }\r\n      if (this.sceneGraph) {\r\n        this.sceneGraph = undefined as any;\r\n      }\r\n      if (this.toolManager) {\r\n        this.toolManager = undefined as any;\r\n      }\r\n      if (this.commandManager) {\r\n        this.commandManager = undefined as any;\r\n      }\r\n\r\n      // 3. DOM清理 - 多级安全策略\r\n      if (this.canvasElement) {\r\n        try {\r\n          // 第一级：检查父子关系并移除\r\n          const parent = this.canvasElement.parentNode || this.canvasElement.parentElement;\r\n          if (parent) {\r\n            // 验证是否真的是子节点\r\n            const children = Array.from(parent.childNodes);\r\n            if (children.includes(this.canvasElement)) {\r\n              parent.removeChild(this.canvasElement);\r\n            }\r\n          }\r\n        } catch (removeError) {\r\n          try {\r\n            // 第二级：使用remove方法\r\n            if (typeof this.canvasElement.remove === 'function') {\r\n              this.canvasElement.remove();\r\n            }\r\n          } catch (finalError) {\r\n            console.warn('Failed to remove canvas element:', finalError);\r\n            // 第三级：强制清理引用\r\n            if (this.containerElement && this.containerElement.contains(this.canvasElement)) {\r\n              try {\r\n                this.containerElement.innerHTML = '';\r\n              } catch (innerHTMLError) {\r\n                console.warn('Failed to clear container innerHTML:', innerHTMLError);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // 4. 清理容器内容（安全方式）\r\n      if (this.containerElement) {\r\n        try {\r\n          // 逐个移除子节点\r\n          while (this.containerElement.firstChild) {\r\n            const child = this.containerElement.firstChild;\r\n            if (child.parentNode === this.containerElement) {\r\n              this.containerElement.removeChild(child);\r\n            } else {\r\n              // 如果父子关系不匹配，直接跳出循环避免死循环\r\n              break;\r\n            }\r\n          }\r\n        } catch (clearError) {\r\n          console.warn('Failed to clear container children:', clearError);\r\n          try {\r\n            this.containerElement.innerHTML = '';\r\n          } catch (innerHTMLError) {\r\n            console.warn('Failed to clear container innerHTML:', innerHTMLError);\r\n          }\r\n        }\r\n      }\r\n\r\n      // 5. 清理引用\r\n      this.canvasElement = null as any;\r\n      this.ctx = null as any;\r\n      this.containerElement = null as any;\r\n\r\n      console.log('SuikaEditor destroyed successfully');\r\n    } catch (error) {\r\n      console.error('Error during SuikaEditor destruction:', error);\r\n    }\r\n  }\r\n\r\n  private unbindEvents(): void {\r\n    try {\r\n      // 清理ResizeObserver\r\n      if (this.resizeObserver) {\r\n        this.resizeObserver.disconnect();\r\n        this.resizeObserver = null;\r\n      }\r\n\r\n      // 移除画布事件监听器\r\n      if (this.canvasElement && this.boundHandlers) {\r\n        this.canvasElement.removeEventListener('mousedown', this.boundHandlers.mouseDown);\r\n        this.canvasElement.removeEventListener('mousemove', this.boundHandlers.mouseMove);\r\n        this.canvasElement.removeEventListener('mouseup', this.boundHandlers.mouseUp);\r\n        this.canvasElement.removeEventListener('wheel', this.boundHandlers.wheel);\r\n      }\r\n      \r\n      // 清理绑定的处理器引用\r\n      this.boundHandlers = null;\r\n    } catch (error) {\r\n      console.warn('Error unbinding events:', error);\r\n    }\r\n  }\r\n\r\n  \r\n  // 事件管理\r\n  on<T extends keyof ISuikaEditorEvents>(eventName: T, listener: ISuikaEditorEvents[T]): void {\r\n    this.emitter.on(eventName, listener);\r\n  }\r\n  \r\n  off<T extends keyof ISuikaEditorEvents>(eventName: T, listener: ISuikaEditorEvents[T]): void {\r\n    this.emitter.off(eventName, listener);\r\n  }\r\n  \r\n  // 获取编辑器状态\r\n  getState(): any {\r\n    return {\r\n      zoom: this.zoomManager.getZoom(),\r\n      viewport: this.viewportManager.getViewport(),\r\n      selectedObjects: this.toolManager.getSelectedObjects(),\r\n      sceneObjects: this.sceneGraph.getObjects()\r\n    };\r\n  }\r\n  \r\n  // 设置编辑器状态\r\n  setState(state: any): void {\r\n    if (state.zoom !== undefined) {\r\n      this.zoomManager.setZoom(state.zoom);\r\n    }\r\n    \r\n    if (state.viewport !== undefined) {\r\n      this.viewportManager.setViewport(state.viewport);\r\n    }\r\n    \r\n    this.render();\r\n  }\r\n}","// UUID生成工具\r\nexport function genUuid(): string {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    const r = Math.random() * 16 | 0;\r\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}"],"names":["GAME_ASSET_PRESETS","MOBILE_PORTRAIT","width","height","name","MOBILE_LANDSCAPE","IPHONE_X","IPHONE_14","IPAD","IPAD_PRO","ICON_SMALL","ICON_MEDIUM","ICON_LARGE","HD","FULL_HD","QUAD_HD","SQUARE_512","SQUARE_1024","ASPECT_16_9","ASPECT_4_3","ASPECT_3_2","SuikaCanvasEngine","constructor","options","type","SUIKA","editor","container","eventEmitter","isInitialized","layers","Map","activeLayerId","toolAdapter","this","showPerfMonitor","enableGrid","enableRuler","backgroundColor","createDefaultLayer","initialize","config","Error","firstChild","removeChild","editorContainer","document","createElement","style","setAttribute","appendChild","containerElement","size","userPreference","setupEventListeners","emit","error","console","destroy","warn","innerHTML","innerError","clear","getState","editorState","zoom","viewport","Array","from","values","selectedObjects","map","obj","id","activeLayer","pan","x","y","setState","state","undefined","currentViewport","viewportManager","getViewport","addObject","object","suikaObject","convertToSuikaObject","sceneGraph","get","objects","push","render","removeObject","layer","filter","updateObject","updates","getObject","Object","assign","selectObjects","ids","toolManager","clearSelection","level","centerPoint","clampedLevel","Math","max","min","zoomManager","zoomAt","getZoom","setZoom","performance","getPerformanceInfo","deltaX","deltaY","smooth","smoothPan","fitToContent","padding","fitToScreen","resetView","resetViewport","resetZoom","getViewportInfo","setViewportInfo","viewportInfo","setViewport","enabled","gridSize","getOptions","setOptions","addGuide","position","guideId","Date","now","random","toString","substr","removeGuide","isPointInViewport","worldX","worldY","screenX","screenY","getVisibleObjects","getObjects","isRectIntersectingViewport","screenLeft","screenTop","screenBottom","screenToWorld","worldToScreen","exportImage","format","quality","canvasElement","toDataURL","fps","frameCount","getCanvasSize","setCanvasSize","createLayer","visible","locked","opacity","set","getLayer","getLayers","setActiveLayer","has","getActiveLayer","on","event","callback","off","getSelectedObjects","fill","stroke","strokeWidth","rotation","radius","text","fontSize","fontFamily","src","getSuikaEditor","getPresetSizes","getToolAdapter","activateTool","getActiveTool","getActiveToolType","getAllToolConfigs","getToolConfig","setToolProperties","properties","getToolProperties","handleMouseDown","handleMouseMove","handleMouseUp","handleKeyDown","handleKeyUp","EventEmitter","listeners","eventName","listener","Set","add","eventListeners","delete","args","forEach","String","removeAllListeners","emitter","currentPage","pages","ctx","getContext","setupCanvas","createDefaultPage","dpr","window","devicePixelRatio","scale","defaultPage","background","value","components","setCurrentPage","createPage","page","pageId","getCurrentPage","getAllPages","addComponent","component","updateComponent","componentId","find","c","removeComponent","index","findIndex","splice","setPageBackground","clearRect","renderBackground","renderComponent","fillStyle","fillRect","save","translate","renderTextComponent","renderImageComponent","renderButtonComponent","restore","color","props","font","textAlign","textBaseline","fillText","strokeStyle","strokeRect","textColor","exportAsImage","exportPageData","contains","forwardRef","mode","onReady","onPageChange","onComponentAdd","onComponentUpdate","onComponentRemove","className","ref","containerRef","useRef","editorRef","useImperativeHandle","getEditor","current","useEffect","overflow","border","displayName","SuikaMemoryEvent","onSelectionChange","TOOL_CONFIGS","SELECT","icon","shortcut","cursor","TEXT","IMAGE","RECTANGLE","CIRCLE","BRUSH","PAN","LINE","POLYGON","STAR","CROP","ZOOM","SuikaToolAdapter","_editor","activeTool","toolProperties","tool","createToolWrapper","deactivateTool","syncPropertiesToSuika","_event","handleShortcut","_ctx","isActive","isDragging","activate","deactivate","onMouseDown","bind","onMouseMove","onMouseUp","onKeyDown","onKeyUp","key","toLowerCase","toolType","entries","preventDefault","_properties","ViewportManager","isPanning","panStart","lastPanTime","panVelocity","minZoom","maxZoom","zoomStep","smoothZoom","enablePan","enableZoom","clampViewport","dx","dy","duration","startTime","startX","startY","targetX","targetY","animate","currentTime","elapsed","progress","easeProgress","easeOutCubic","requestAnimationFrame","zoomDelta","currentZoom","newZoom","zoomCenterX","zoomCenterY","zoomRatio","canvas","canvasWidth","canvasHeight","containerWidth","clientWidth","containerHeight","clientHeight","scaleX","scaleY","bounds","getAllBounds","contentWidth","contentHeight","scaledHeight","startPan","updatePan","deltaTime","endPan","abs","applyInertia","contentBounds","getContentBounds","centerX","centerY","length","minX","Infinity","minY","maxX","maxY","objMinX","objMinY","objMaxX","objMaxY","t","pow","getViewportState","ZoomManager","targetZoom","isAnimating","animationStartTime","animationDuration","zoomDuration","clampedZoom","clampZoom","animateZoom","newViewportX","newViewportY","zoomToFit","zoomToContent","zoomIn","step","zoomOut","getZoomTransform","viewportToScene","sceneToViewport","viewportToSceneSize","sceneToViewportSize","getZoomState","isZoomInRange","getZoomPercentage","round","setZoomPercentage","percentage","QuadTreeSpatialIndex","insert","remove","query","region","result","intersects","update","a","b","SceneGraph","renderOrder","spatialIndex","calculateObjectBounds","indexOf","viewportWorldBounds","visibleObjectIds","includes","renderObject","renderRect","renderCircle","renderText","renderImage","lineWidth","beginPath","arc","PI","strokeText","img","Image","onload","drawImage","getObjectBounds","tempCtx","metrics","measureText","findObjectAtPoint","i","pointInBounds","textWidth","viewportBounds","Boolean","getSpatialIndexStats","totalObjects","indexedObjects","getStats","visibleCount","lockedCount","objectCount","SelectTool","dragStart","dragOffset","clickedObject","ctrlKey","metaKey","selectObject","moveSelectedObjects","_x","_y","renderSelectionBoxes","deselectObject","setLineDash","ToolManager","tools","initializeTools","selectTool","setActiveTool","toolName","getTools","addTool","removeTool","CommandManager","history","currentIndex","maxHistorySize","execute","command","slice","lastCommand","canMerge","mergedCommand","merge","shift","undo","canUndo","redo","canRedo","getHistorySize","getCurrentIndex","SuikaEditor","perfMonitor","lastRenderTime","boundHandlers","resizeObserver","paperId","replace","r","context","resizeCanvas","commandManager","initPerfMonitor","bindEvents","Promise","resolve","then","rect","getBoundingClientRect","mouseDown","mouseMove","mouseUp","wheel","handleWheel","ResizeObserver","observe","addEventListener","getSceneCursorXY","delta","toScenePt","toViewportPt","getCursorXY","clientX","left","offsetX","clientY","top","offsetY","endTime","unbindEvents","parent","parentNode","parentElement","childNodes","removeError","finalError","innerHTMLError","child","clearError","log","disconnect","removeEventListener","sceneObjects"],"sourceRoot":""}